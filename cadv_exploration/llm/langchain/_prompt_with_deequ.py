from inspect import cleandoc

ASSUMPTIONS_EXTRACTION_PROMPT = cleandoc("""You are part of a task-aware data validation system. You serve as the *Assumptions Extraction* component.
Given that the code written for the downstream task may be not robust enough to handle all possible data scenarios, you should find the code's assumptions and requirements about the relevant columns. These assumptions would then be used to generate validation rules to ensure the data meets the code's expectations and requirements.


Here are the things you need to consider:
1. Make sure the assumptions are only about the relevant columns generated by the *Relevant Column Target* component.
2. You can generate assumptions for both individual columns, i.e., the column named 'age' should be greater than 18, and relationships between columns, i.e., the column named 'age' should be greater than the column named 'min_age'.
3. The assumptions should be in a human-readable format and would be converted into formal validation rules in the next step.

The dataset is a CSV file with the following columns:
{columns_desc}

The user writes the code snippet below:
{code_snippet}

The relevant columns generated by the *Relevant Column Target* component are:
{relevant_columns}

The above code snippet is used for the following downstream task:
{downstream_task_description}

There are some assumptions formulated by deequ, a data validation library, you can use them as a reference.
Notice that deequ only considers data but not the code or the downstream task. You should add, modify, or remove assumptions based on the code and the downstream task to make them more relevant and effective.
{deequ_assumptions}

Please generate validation rules as a JSON object with the column names as keys and a list of assumptions as values.
e.g., ```{{'column_name_1': ['assumption_1', 'assumption_2', ...], 'column_name_2': ['assumption_1', 'assumption_2', ...], ...}}```
""")
