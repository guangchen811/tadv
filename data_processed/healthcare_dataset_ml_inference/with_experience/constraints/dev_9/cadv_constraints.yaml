constraints:
  Age:
    code:
    - - '.hasMax(''Age'', lambda x: x <= 120)'
      - Valid
    - - .isComplete('Age')
      - Valid
    - - '.isGreaterThanOrEqualTo(''Age'', ''65'', lambda x: x > 0.8)'
      - Invalid
    - - .isNonNegative('Age')
      - Valid
    - - '.satisfies(''Age BETWEEN 40 AND 64'', ''Medium risk level check'', lambda
        x: x > 0.8)'
      - Invalid
    assumptions:
    - The column should be complete, as it has 100% completeness.
    - The column should have a minimum value of 0, as age cannot be negative.
    - The column should have a maximum value of 120 as a reasonable assumption for
      the maximum age.
    - The column should have values greater than or equal to 65 for the 'High' risk
      level.
    - The column should have values between 40 and 64 for the 'Medium' risk level.
  Medical Condition:
    code:
    - - .isComplete('Medical Condition')
      - Valid
    - - .isContainedIn('Medical Condition', ['Hypertension', 'Cancer', 'Obesity',
        'Arthritis', 'Diabetes', 'Asthma'])
      - Valid
    - - '.satisfies(''(Medical Condition = ''Cancer'' OR Medical Condition = ''Diabetes'')'',
        ''High risk level check'', lambda x: x > 0.8)'
      - Invalid
    assumptions:
    - The column should be complete, as it has 100% completeness.
    - 'The column should have values within the known categories: ''Hypertension'',
      ''Cancer'', ''Obesity'', ''Arthritis'', ''Diabetes'', ''Asthma''.'
    - For the 'High' risk level, the column should have values 'Cancer' or 'Diabetes'.
  Name:
    code:
    - - .isComplete('Name')
      - Valid
    assumptions:
    - The column should be complete, as it has 100% completeness.
  id:
    code:
    - - '.hasUniqueness([''id''], lambda x: x > 0.99)'
      - Valid
    assumptions:
    - The column should have unique values as the approximate number of distinct values
      is close to the total number of records.
