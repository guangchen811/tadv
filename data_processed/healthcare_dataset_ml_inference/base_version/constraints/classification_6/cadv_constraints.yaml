constraints:
  Age:
    code:
    - - '.hasMax(''Age'', lambda x: x <= 120)'
      - Valid
    - - .isComplete('Age')
      - Valid
    - - .isNonNegative('Age')
      - Valid
    assumptions:
    - Age should be a non-negative integer.
    - Age should be within a reasonable range for human age (e.g., 0 to 120).
  Gender:
    code:
    - - .isComplete('Gender')
      - Valid
    - - .isContainedIn('Gender', ['Male', 'Female'])
      - Valid
    assumptions:
    - 'Gender should be one of the predefined categories: ''Male'' or ''Female''.'
  admission_date:
    code:
    - - .isComplete('admission_date')
      - Invalid
    - - .satisfies('admission_date >= 0', 'admission_date should be converted to a
        numeric timestamp')
      - Invalid
    assumptions:
    - admission_date should be a valid date format.
    - admission_date should be converted to a numeric timestamp for processing.
  billing_amount:
    code:
    - - .isComplete('billing_amount')
      - Invalid
    - - .isNonNegative('billing_amount')
      - Invalid
    assumptions:
    - billing_amount should be a non-negative number, representing a valid monetary
      amount.
  id:
    code:
    - - .isUnique('id')
      - Valid
    assumptions:
    - id should be unique across all records.
  medical_condition:
    code:
    - - .isComplete('medical_condition')
      - Invalid
    - - .isContainedIn('medical_condition', ['Hypertension', 'Cancer', 'Obesity',
        'Arthritis', 'Diabetes', 'Asthma'])
      - Invalid
    assumptions:
    - 'medical_condition should be one of the predefined categories: ''Hypertension'',
      ''Cancer'', ''Obesity'', ''Arthritis'', ''Diabetes'', or ''Asthma''.'
  test_results:
    code:
    - - .isComplete('test_results')
      - Invalid
    - - .isContainedIn('test_results', ['Abnormal', 'Normal', 'Inconclusive'])
      - Invalid
    assumptions:
    - 'test_results should be one of the predefined categories: ''Abnormal'', ''Normal'',
      or ''Inconclusive''.'
