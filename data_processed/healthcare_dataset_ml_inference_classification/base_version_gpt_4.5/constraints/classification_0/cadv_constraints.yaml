constraints:
  Admission Type:
    code:
    - - .isContainedIn('Admission Type', ['Emergency', 'Urgent', 'Elective'])
      - Valid
    assumptions:
    - Values in 'Admission Type' should only contain the categories ['Emergency',
      'Urgent', 'Elective'].
  Age:
    code:
    - - '.hasMax(''Age'', lambda x: x <= 120)'
      - Valid
    - - '.hasMin(''Age'', lambda x: x >= 0)'
      - Valid
    assumptions:
    - Values in 'Age' should be between 0 and 120 inclusive.
  Billing Amount:
    code:
    - - .isNonNegative('Billing Amount')
      - Invalid
    assumptions:
    - Values in 'Billing Amount' should be non-negative.
  Blood Type:
    code:
    - - .isContainedIn('Blood Type', ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+',
        'O-'])
      - Valid
    assumptions:
    - 'Values in ''Blood Type'' should only contain known categories: [''A+'', ''A-'',
      ''B+'', ''B-'', ''AB+'', ''AB-'', ''O+'', ''O-''].'
  Date of Admission:
    code:
    - - .hasPattern('Date of Admission', '^\\d{4}-\\d{2}-\\d{2}$')
      - Valid
    - - .isComplete('Date of Admission')
      - Valid
    - - .isLessThanOrEqualTo('Date of Admission', 'Discharge Date')
      - Invalid
    assumptions:
    - Values in 'Date of Admission' should follow a valid date format.
    - Values in 'Date of Admission' should not contain nulls.
    - '''Date of Admission'' should be equal to or earlier than ''Discharge Date''.'
  Discharge Date:
    code:
    - - .hasPattern('Discharge Date', '^\\d{4}-\\d{2}-\\d{2}$')
      - Valid
    - - .isComplete('Discharge Date')
      - Valid
    - - .isGreaterThanOrEqualTo('Discharge Date', 'Date of Admission')
      - Invalid
    assumptions:
    - Values in 'Discharge Date' should follow a valid date format.
    - Values in 'Discharge Date' should not contain nulls.
    - '''Discharge Date'' should be equal to or later than ''Date of Admission''.'
  Doctor:
    code:
    - - .isComplete('Doctor')
      - Valid
    assumptions:
    - Values in 'Doctor' should not contain nulls.
  Gender:
    code:
    - - .isContainedIn('Gender', ['Male', 'Female'])
      - Valid
    assumptions:
    - Values in 'Gender' should only contain the categories ['Male', 'Female'].
  Hospital:
    code:
    - - .isComplete('Hospital')
      - Valid
    assumptions:
    - Values in 'Hospital' should not contain nulls.
  Insurance Provider:
    code:
    - - .isContainedIn('Insurance Provider', ['Aetna', 'Blue Cross', 'UnitedHealthcare',
        'Cigna', 'Medicare'])
      - Valid
    assumptions:
    - 'Values in ''Insurance Provider'' should only contain the known categories:
      [''Aetna'', ''Blue Cross'', ''UnitedHealthcare'', ''Cigna'', ''Medicare''].'
  Medical Condition:
    code:
    - - .isContainedIn('Medical Condition', ['Hypertension', 'Cancer', 'Obesity',
        'Arthritis', 'Diabetes', 'Asthma'])
      - Valid
    assumptions:
    - 'Values in ''Medical Condition'' should only contain known categories: [''Hypertension'',
      ''Cancer'', ''Obesity'', ''Arthritis'', ''Diabetes'', ''Asthma''].'
  Medication:
    code:
    - - .isContainedIn('Medication', ['Aspirin', 'Paracetamol', 'Ibuprofen', 'Penicillin',
        'Lipitor'])
      - Valid
    assumptions:
    - 'Values in ''Medication'' should only contain known categories: [''Aspirin'',
      ''Paracetamol'', ''Ibuprofen'', ''Penicillin'', ''Lipitor''].'
  Name:
    code:
    - - .isComplete('Name')
      - Valid
    assumptions:
    - Values in 'Name' should not contain nulls.
  Room Number:
    code:
    - - .isNonNegative('Room Number')
      - Invalid
    assumptions:
    - Values in 'Room Number' should be non-negative.
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - Values in 'id' should be unique.
    - Values in 'id' should not contain nulls.
