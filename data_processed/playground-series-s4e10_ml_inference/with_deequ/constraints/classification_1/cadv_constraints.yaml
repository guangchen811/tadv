constraints:
  cb_person_cred_hist_length:
    code:
    - - '.hasMax(''cb_person_cred_hist_length'', lambda x: x < 100)'
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - Values should be non-negative
    - Values should be realistic for credit history length in years
  cb_person_default_on_file:
    code:
    - - .isContainedIn('cb_person_default_on_file', ['N', 'Y'])
      - Valid
    assumptions:
    - Values should be one of ['N', 'Y']
  id:
    code:
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - Values should be unique
    - Values should be non-negative
  loan_amnt:
    code:
    - - '.hasMax(''loan_amnt'', lambda x: x < 1000000)'
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - Values should be non-negative
    - Values should be realistic for loan amounts
  loan_grade:
    code:
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - Values should be one of ['A', 'B', 'C', 'D', 'E', 'F', 'G']
  loan_int_rate:
    code:
    - - '.hasMax(''loan_int_rate'', lambda x: x < 100)'
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - Values should be non-negative
    - Values should represent a realistic interest rate
  loan_intent:
    code:
    - - .isContainedIn('loan_intent', ['EDUCATION', 'MEDICAL', 'PERSONAL', 'VENTURE',
        'DEBTCONSOLIDATION', 'HOMEIMPROVEMENT'])
      - Valid
    assumptions:
    - Values should be one of ['EDUCATION', 'MEDICAL', 'PERSONAL', 'VENTURE', 'DEBTCONSOLIDATION',
      'HOMEIMPROVEMENT']
  loan_percent_income:
    code:
    - - '.hasMax(''loan_percent_income'', lambda x: x < 1)'
      - Valid
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - Values should be non-negative
    - Values should represent a realistic percentage
  person_age:
    code:
    - - '.hasMax(''person_age'', lambda x: x < 120)'
      - Valid
    - - .isNonNegative('person_age')
      - Valid
    assumptions:
    - Values should be non-negative and reasonable for age
    - Values should be within the range of typical human ages
  person_emp_length:
    code:
    - - '.hasMax(''person_emp_length'', lambda x: x < 50)'
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - Values should be non-negative
    - Values should be reasonable for employment length in years
  person_home_ownership:
    code:
    - - .isContainedIn('person_home_ownership', ['RENT', 'MORTGAGE', 'OWN', 'OTHER'])
      - Valid
    assumptions:
    - Values should be one of ['RENT', 'MORTGAGE', 'OWN', 'OTHER']
  person_income:
    code:
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - Values should be non-negative
