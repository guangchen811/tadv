constraints:
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - cb_person_default_on_file should be a complete column with no missing values.
    - 'cb_person_default_on_file should be one of the values: [''Y'', ''N''].'
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - id should be a complete column with no missing values.
    - id should be unique for each record.
    - id should be a non-negative integer.
  loan_amnt:
    code:
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - loan_amnt should be a complete column with no missing values.
    - loan_amnt should be a non-negative integer, as loan amounts can't be negative.
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - loan_grade should be a complete column with no missing values.
    - 'loan_grade should be one of the predefined categories: [''A'', ''B'', ''C'',
      ''D'', ''E'', ''F'', ''G''].'
  loan_int_rate:
    code:
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - loan_int_rate should be a complete column with no missing values.
    - loan_int_rate should be a non-negative value, as interest rates can't be negative.
  loan_status:
    code:
    - - .isComplete('loan_status')
      - Valid
    - - .isContainedIn('loan_status', [0, 1])
      - Invalid
    assumptions:
    - loan_status should be a complete column with no missing values.
    - loan_status should be either 0 or 1, representing binary classification labels.
  loan_to_income_ratio:
    code:
    - - .isNonNegative('loan_to_income_ratio')
      - Invalid
    assumptions:
    - loan_to_income_ratio should be computed as loan_amnt divided by person_income.
    - loan_to_income_ratio should be a non-negative value as both loan_amnt and person_income
      are non-negative.
  person_age:
    code:
    - - '.hasMax(''person_age'', lambda x: x <= 100)'
      - Valid
    - - '.hasMin(''person_age'', lambda x: x >= 18)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    - - .isNonNegative('person_age')
      - Valid
    assumptions:
    - person_age should be a complete column with no missing values.
    - person_age should be a non-negative integer, as negative age doesn't make sense.
    - person_age should contain reasonable age values, typically ranging from 18 to
      100.
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['RENT', 'MORTGAGE', 'OWN', 'OTHER'])
      - Valid
    assumptions:
    - person_home_ownership should be a complete column with no missing values.
    - 'person_home_ownership should be one of the predefined categories: [''RENT'',
      ''MORTGAGE'', ''OWN'', ''OTHER''].'
  person_income:
    code:
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - person_income should be a complete column with no missing values.
    - person_income should be a non-negative integer, as income can't be negative.
