constraints:
  loan_intent:
    code:
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL',
        'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE'])
      - Valid
    assumptions:
    - 'The column should have values within the observed categorical range: [''EDUCATION'',
      ''HOMEIMPROVEMENT'', ''PERSONAL'', ''DEBTCONSOLIDATION'', ''MEDICAL'', ''VENTURE'']
      and potentially other reasonable values.'
    - The column is complete, suggesting a NOT NULL constraint.
    - Most values in the column fall within the observed categories, suggesting an
      IS IN constraint for these categories.
  person_income:
    code:
    - - '.hasMax(''person_income'', lambda x: x <= 100000)'
      - Invalid
    - - '.hasMin(''person_income'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - The column is complete, suggesting a NOT NULL constraint.
    - The column should have a minimum value, as indicated by the code logic for 'person_income
      < 50000'.
    - The column should have a maximum value, as the code implies a categorization
      up to 100000.
    - The column should be non-negative as it represents income.
    - The column is numeric, suggesting constraints on mean and standard deviation.
