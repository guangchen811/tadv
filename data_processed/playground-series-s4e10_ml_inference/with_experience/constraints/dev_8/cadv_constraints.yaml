constraints:
  loan_amnt:
    code:
    - - '.hasMax(''loan_amnt'', lambda x: x <= <historical_max_value>)'
      - Invalid
    - - '.hasMean(''loan_amnt'', lambda x: x == <historical_mean>)'
      - Invalid
    - - '.hasMin(''loan_amnt'', lambda x: x >= <historical_min_value>)'
      - Invalid
    - - '.hasStandardDeviation(''loan_amnt'', lambda x: x == <historical_std_dev>)'
      - Invalid
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - The column 'loan_amnt' should be NOT NULL.
    - The column 'loan_amnt' should have a maximum value constraint, based on historical
      data.
    - The column 'loan_amnt' should have a minimum value constraint, based on historical
      data.
    - The column 'loan_amnt' should be non-negative.
    - The column 'loan_amnt' should have a mean and standard deviation constraint,
      based on historical data.
  loan_int_rate:
    code:
    - - '.hasMax(''loan_int_rate'', lambda x: x <= <historical_max_value>)'
      - Invalid
    - - '.hasMean(''loan_int_rate'', lambda x: x == <historical_mean>)'
      - Invalid
    - - '.hasMin(''loan_int_rate'', lambda x: x >= <historical_min_value>)'
      - Invalid
    - - '.hasStandardDeviation(''loan_int_rate'', lambda x: x == <historical_std_dev>)'
      - Invalid
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - The column 'loan_int_rate' should be NOT NULL.
    - The column 'loan_int_rate' should have a maximum value constraint, based on
      historical data.
    - The column 'loan_int_rate' should have a minimum value constraint, based on
      historical data.
    - The column 'loan_int_rate' should be non-negative.
    - The column 'loan_int_rate' should have a mean and standard deviation constraint,
      based on historical data.
  loan_intent:
    code:
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL',
        'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE'])
      - Valid
    assumptions:
    - 'The column ''loan_intent'' should have values within the range: [''EDUCATION'',
      ''HOMEIMPROVEMENT'', ''PERSONAL'', ''DEBTCONSOLIDATION'', ''MEDICAL'', ''VENTURE''].'
    - The column 'loan_intent' should be NOT NULL.
  person_income:
    code:
    - - '.hasMax(''person_income'', lambda x: x <= <historical_max_value>)'
      - Invalid
    - - '.hasMean(''person_income'', lambda x: x == <historical_mean>)'
      - Invalid
    - - '.hasMin(''person_income'', lambda x: x >= <historical_min_value>)'
      - Invalid
    - - '.hasStandardDeviation(''person_income'', lambda x: x == <historical_std_dev>)'
      - Invalid
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - The column 'person_income' should be NOT NULL.
    - The column 'person_income' should have a maximum value constraint, based on
      historical data.
    - The column 'person_income' should have a minimum value constraint, based on
      historical data.
    - The column 'person_income' should be non-negative.
    - The column 'person_income' should have a mean and standard deviation constraint,
      based on historical data.
