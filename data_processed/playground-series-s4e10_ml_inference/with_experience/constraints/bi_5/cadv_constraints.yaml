constraints:
  loan_amnt:
    code:
    - - '.hasMean(''loan_amnt'', lambda x: x > 0)'
      - Valid
    - - '.hasStandardDeviation(''loan_amnt'', lambda x: x > 0)'
      - Valid
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - Assume loan_amnt is non-negative
    - Assume loan_amnt is NOT NULL
    - Suggest mean and standard deviation constraint for loan_amnt
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - Assume loan_grade contains values 'A', 'B', 'C', 'D', 'E', 'F', 'G'
    - Assume loan_grade is NOT NULL
    - Suggest IS IN constraint for loan_grade with values 'A', 'B', 'C', 'D', 'E',
      'F', 'G'
  person_income:
    code:
    - - '.hasMean(''person_income'', lambda x: x > 0)'
      - Valid
    - - '.hasStandardDeviation(''person_income'', lambda x: x > 0)'
      - Valid
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - Assume person_income is non-negative
    - Assume person_income is NOT NULL
    - Suggest mean and standard deviation constraint for person_income
