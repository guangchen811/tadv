constraints:
  cb_person_cred_hist_length:
    code:
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - cb_person_cred_hist_length should be a non-negative integer
  cb_person_default_on_file:
    code:
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - cb_person_default_on_file should be one of ['Y', 'N']
  id:
    code:
    - - .isUnique('id')
      - Valid
    assumptions:
    - id should be unique for each entry
  loan_amnt:
    code:
    - - '.hasHistogramValues(''loan_amnt'', lambda x: x == 1.0, binningUdf=lambda
        x: pd.cut(x, bins=[0, 5000, 15000, 30000, np.inf], labels=[''Low'', ''Medium'',
        ''High'', ''Very High'']))'
      - Invalid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - loan_amnt should be a non-negative integer
    - loan_amnt should be categorized into 'Low', 'Medium', 'High', or 'Very High'
      using the bins [0, 5000, 15000, 30000, np.inf]
  loan_amnt_category:
    code:
    - - .isContainedIn('loan_amnt_category', ['Low', 'Medium', 'High', 'Very High'])
      - Invalid
    assumptions:
    - loan_amnt_category should be one of ['Low', 'Medium', 'High', 'Very High']
  loan_grade:
    code:
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - loan_grade should be one of ['A', 'B', 'C', 'D', 'E', 'F', 'G']
  loan_int_rate:
    code:
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - loan_int_rate should be a non-negative fractional number
  loan_percent_income:
    code:
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - loan_percent_income should be a non-negative fractional number
  person_home_ownership:
    code:
    - - .isContainedIn('person_home_ownership', ['OTHER', 'OWN', 'MORTGAGE', 'RENT'])
      - Valid
    assumptions:
    - person_home_ownership should be one of ['OTHER', 'OWN', 'MORTGAGE', 'RENT']
