constraints:
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - 'cb_person_default_on_file should be one of the categories: [''Y'', ''N''].'
    - cb_person_default_on_file should not be null.
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - id should be unique for each record.
    - id should not be null.
  loan_amnt:
    code:
    - - '.hasMin(''loan_amnt'', lambda x: x >= 0)'
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - loan_amnt should be a non-negative integer.
    - loan_amnt should have a minimum value of 0.
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - 'loan_grade should be one of the categories: [''A'', ''B'', ''C'', ''D'', ''E'',
      ''F'', ''G''].'
    - loan_grade should not be null.
  loan_int_rate:
    code:
    - - '.hasMin(''loan_int_rate'', lambda x: x >= 0.0)'
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - loan_int_rate should be a non-negative decimal.
    - loan_int_rate should have a minimum value of 0.0.
  loan_to_income_ratio:
    code:
    - - '.hasMin(''loan_to_income_ratio'', lambda x: x >= 0.0)'
      - Invalid
    - - .isNonNegative('loan_to_income_ratio')
      - Invalid
    assumptions:
    - loan_to_income_ratio should be a non-negative decimal.
    - loan_to_income_ratio should have a minimum value of 0.0.
  person_age:
    code:
    - - '.hasMax(''person_age'', lambda x: x <= 120)'
      - Valid
    - - '.hasMin(''person_age'', lambda x: x >= 0)'
      - Valid
    - - .isNonNegative('person_age')
      - Valid
    assumptions:
    - person_age should be a non-negative integer.
    - person_age should have a minimum value of 0.
    - person_age should have a reasonable maximum value, e.g., 120.
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['OWN', 'MORTGAGE', 'RENT', 'OTHER'])
      - Valid
    assumptions:
    - 'person_home_ownership should be one of the categories: [''OWN'', ''MORTGAGE'',
      ''RENT'', ''OTHER''].'
    - person_home_ownership should not be null.
  person_income:
    code:
    - - '.hasMin(''person_income'', lambda x: x >= 0)'
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - person_income should be a non-negative integer.
    - person_income should have a minimum value of 0.
