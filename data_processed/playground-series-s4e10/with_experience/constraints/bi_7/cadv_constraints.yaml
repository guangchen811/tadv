constraints:
  loan_amnt:
    code:
    - - '.hasMean(''loan_amnt'', lambda x: x is not None)'
      - Valid
    - - '.hasStandardDeviation(''loan_amnt'', lambda x: x is not None)'
      - Valid
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - The column 'loan_amnt' is complete and should have a NOT NULL constraint.
    - The column 'loan_amnt' should have a mean and standard deviation constraint.
    - The column 'loan_amnt' should be non-negative.
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - The column 'loan_grade' should have values within the set {'A', 'B', 'C', 'D',
      'E', 'F', 'G'}.
    - The column 'loan_grade' is complete and should have a NOT NULL constraint.
  loan_int_rate:
    code:
    - - '.hasMean(''loan_int_rate'', lambda x: x is not None)'
      - Valid
    - - '.hasStandardDeviation(''loan_int_rate'', lambda x: x is not None)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - The column 'loan_int_rate' is complete and should have a NOT NULL constraint.
    - The column 'loan_int_rate' should have a mean and standard deviation constraint.
    - The column 'loan_int_rate' should be non-negative.
  loan_intent:
    code:
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL',
        'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE'])
      - Valid
    assumptions:
    - The column 'loan_intent' should have values within the set {'EDUCATION', 'HOMEIMPROVEMENT',
      'PERSONAL', 'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE'}.
    - The column 'loan_intent' is complete and should have a NOT NULL constraint.
  loan_percent_income:
    code:
    - - '.hasMean(''loan_percent_income'', lambda x: x is not None)'
      - Valid
    - - '.hasStandardDeviation(''loan_percent_income'', lambda x: x is not None)'
      - Valid
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - The column 'loan_percent_income' is complete and should have a NOT NULL constraint.
    - The column 'loan_percent_income' should have a mean and standard deviation constraint.
    - The column 'loan_percent_income' should be non-negative.
  loan_status:
    code:
    - - .isComplete('loan_status')
      - Valid
    - - .isContainedIn('loan_status', [0, 1])
      - Invalid
    assumptions:
    - The column 'loan_status' should have values 0 or 1.
    - The column 'loan_status' is complete and should have a NOT NULL constraint.
  person_income:
    code:
    - - '.hasMean(''person_income'', lambda x: x is not None)'
      - Valid
    - - '.hasStandardDeviation(''person_income'', lambda x: x is not None)'
      - Valid
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - The column 'person_income' is complete and should have a NOT NULL constraint.
    - The column 'person_income' should have a mean and standard deviation constraint.
    - The column 'person_income' should be non-negative.
