constraints:
  loan_amnt:
    code:
    - - '.hasMax(''loan_amnt'', lambda x: x < 1000000)'
      - Valid
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - The 'loan_amnt' column should not contain NULL values as its completeness is
      1.0.
    - The 'loan_amnt' column should have a minimum value of 0, assuming non-negative
      loan amounts.
    - The 'loan_amnt' column is used to calculate average loan amount, suggesting
      it should have reasonable numeric values without extreme outliers.
  loan_int_rate:
    code:
    - - '.hasMax(''loan_int_rate'', lambda x: x < 100)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - The 'loan_int_rate' column should not contain NULL values as its completeness
      is 1.0.
    - The 'loan_int_rate' column should have a minimum value of 0, assuming non-negative
      interest rates.
    - The 'loan_int_rate' column is used to calculate average interest rate, suggesting
      it should have reasonable numeric values without extreme outliers.
  person_income:
    code:
    - - '.hasMax(''person_income'', lambda x: x < 1000000)'
      - Invalid
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - The 'person_income' column should not contain NULL values as its completeness
      is 1.0.
    - The 'person_income' column should have a minimum value of 0, assuming non-negative
      income values.
    - The 'person_income' column is used for categorizing income into bands, suggesting
      it should contain realistic income values without extreme outliers.
