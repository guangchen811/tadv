constraints:
  cb_person_cred_hist_length:
    code:
    - - '.hasMax(''cb_person_cred_hist_length'', lambda x: x <= 30)'
      - Valid
    - - '.hasMean(''cb_person_cred_hist_length'', lambda x: x > 0)'
      - Valid
    - - '.hasMin(''cb_person_cred_hist_length'', lambda x: x >= 0)'
      - Valid
    - - '.hasStandardDeviation(''cb_person_cred_hist_length'', lambda x: x > 0)'
      - Valid
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - The column 'cb_person_cred_hist_length' should be complete (NOT NULL).
    - The column 'cb_person_cred_hist_length' contains only non-negative numbers,
      it should be non-negative.
    - The column 'cb_person_cred_hist_length' should have a corresponding minimum
      constraint.
    - The column 'cb_person_cred_hist_length' should have a corresponding maximum
      constraint.
    - The column 'cb_person_cred_hist_length' should have a mean and standard deviation
      constraint.
  cb_person_default_on_file:
    code:
    - - '.hasPattern(''cb_person_default_on_file'', ''Y|N'', lambda x: x > 0.8)'
      - Valid
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - The column 'cb_person_default_on_file' should be complete (NOT NULL).
    - The column 'cb_person_default_on_file' should have values within ['Y', 'N'].
    - The column 'cb_person_default_on_file' should have values 'Y', 'N' for most
      entries.
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - The column 'id' should be complete (NOT NULL).
    - The column 'id' should have unique values.
  loan_amnt:
    code:
    - - '.hasMax(''loan_amnt'', lambda x: x <= 50000)'
      - Valid
    - - '.hasMean(''loan_amnt'', lambda x: x > 0)'
      - Valid
    - - '.hasMin(''loan_amnt'', lambda x: x >= 500)'
      - Valid
    - - '.hasStandardDeviation(''loan_amnt'', lambda x: x > 0)'
      - Valid
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - The column 'loan_amnt' should be complete (NOT NULL).
    - The column 'loan_amnt' contains only non-negative numbers, it should be non-negative.
    - The column 'loan_amnt' should have a corresponding minimum constraint.
    - The column 'loan_amnt' should have a corresponding maximum constraint.
    - The column 'loan_amnt' should have a mean and standard deviation constraint.
  loan_int_rate:
    code:
    - - '.hasMax(''loan_int_rate'', lambda x: x <= 100)'
      - Valid
    - - '.hasMean(''loan_int_rate'', lambda x: x > 0)'
      - Valid
    - - '.hasMin(''loan_int_rate'', lambda x: x >= 0)'
      - Valid
    - - '.hasStandardDeviation(''loan_int_rate'', lambda x: x > 0)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    assumptions:
    - The column 'loan_int_rate' should be complete (NOT NULL).
    - The column 'loan_int_rate' should have a corresponding minimum constraint.
    - The column 'loan_int_rate' should have a corresponding maximum constraint.
    - The column 'loan_int_rate' should have a mean and standard deviation constraint.
  loan_intent:
    code:
    - - '.hasPattern(''loan_intent'', ''EDUCATION|HOMEIMPROVEMENT|PERSONAL|DEBTCONSOLIDATION|MEDICAL|VENTURE'',
        lambda x: x > 0.8)'
      - Valid
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL',
        'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE'])
      - Valid
    assumptions:
    - The column 'loan_intent' should be complete (NOT NULL).
    - The column 'loan_intent' should have values within ['EDUCATION', 'HOMEIMPROVEMENT',
      'PERSONAL', 'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE'].
    - The column 'loan_intent' should have values 'EDUCATION', 'HOMEIMPROVEMENT',
      'PERSONAL', 'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE' for most entries.
  loan_percent_income:
    code:
    - - '.hasMax(''loan_percent_income'', lambda x: x <= 1)'
      - Valid
    - - '.hasMean(''loan_percent_income'', lambda x: x > 0)'
      - Valid
    - - '.hasMin(''loan_percent_income'', lambda x: x >= 0)'
      - Valid
    - - '.hasStandardDeviation(''loan_percent_income'', lambda x: x > 0)'
      - Valid
    - - .isComplete('loan_percent_income')
      - Valid
    assumptions:
    - The column 'loan_percent_income' should be complete (NOT NULL).
    - The column 'loan_percent_income' should have a corresponding minimum constraint.
    - The column 'loan_percent_income' should have a corresponding maximum constraint.
    - The column 'loan_percent_income' should have a mean and standard deviation constraint.
  person_age:
    code:
    - - '.hasMax(''person_age'', lambda x: x <= 120)'
      - Valid
    - - '.hasMean(''person_age'', lambda x: x > 0)'
      - Valid
    - - '.hasMin(''person_age'', lambda x: x >= 18)'
      - Valid
    - - '.hasStandardDeviation(''person_age'', lambda x: x > 0)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    - - .isNonNegative('person_age')
      - Valid
    assumptions:
    - The column 'person_age' should be complete (NOT NULL).
    - The column 'person_age' contains only non-negative numbers, it should be non-negative.
    - The column 'person_age' should have a corresponding minimum constraint.
    - The column 'person_age' should have a corresponding maximum constraint.
    - The column 'person_age' should have a mean and standard deviation constraint.
  person_emp_length:
    code:
    - - '.hasMax(''person_emp_length'', lambda x: x <= 50)'
      - Valid
    - - '.hasMean(''person_emp_length'', lambda x: x > 0)'
      - Valid
    - - '.hasMin(''person_emp_length'', lambda x: x >= 0)'
      - Valid
    - - '.hasStandardDeviation(''person_emp_length'', lambda x: x > 0)'
      - Valid
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - The column 'person_emp_length' should be complete (NOT NULL).
    - The column 'person_emp_length' contains only non-negative numbers, it should
      be non-negative.
    - The column 'person_emp_length' should have a corresponding minimum constraint.
    - The column 'person_emp_length' should have a corresponding maximum constraint.
    - The column 'person_emp_length' should have a mean and standard deviation constraint.
  person_home_ownership:
    code:
    - - '.hasPattern(''person_home_ownership'', ''OTHER|OWN|MORTGAGE|RENT'', lambda
        x: x > 0.8)'
      - Valid
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['OTHER', 'OWN', 'MORTGAGE', 'RENT'])
      - Valid
    assumptions:
    - The column 'person_home_ownership' should be complete (NOT NULL).
    - The column 'person_home_ownership' should have values within ['OTHER', 'OWN',
      'MORTGAGE', 'RENT'].
    - The column 'person_home_ownership' should have values 'OTHER', 'OWN', 'MORTGAGE',
      'RENT' for most entries.
  person_income:
    code:
    - - '.hasMax(''person_income'', lambda x: x <= 1000000)'
      - Invalid
    - - '.hasMean(''person_income'', lambda x: x > 0)'
      - Valid
    - - '.hasMin(''person_income'', lambda x: x >= 1000)'
      - Valid
    - - '.hasStandardDeviation(''person_income'', lambda x: x > 0)'
      - Valid
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - The column 'person_income' should be complete (NOT NULL).
    - The column 'person_income' contains only non-negative numbers, it should be
      non-negative.
    - The column 'person_income' should have a corresponding minimum constraint.
    - The column 'person_income' should have a corresponding maximum constraint.
    - The column 'person_income' should have a mean and standard deviation constraint.
