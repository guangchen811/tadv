constraints:
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - Value should be one of ['Y', 'N']
    - Column should be complete without missing values
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - Value should be a non-negative integer
    - ID should be unique across the dataset
    - Column should be complete without missing values
  loan_amnt:
    code:
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - Value should be a non-negative integer
    - Column should be complete without missing values
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - Value should be one of ['A', 'B', 'C', 'D', 'E', 'F', 'G']
    - Column should be complete without missing values
  loan_int_rate:
    code:
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - Value should be a non-negative fractional number
    - Column should be complete without missing values
  loan_intent:
    code:
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'MEDICAL', 'PERSONAL', 'VENTURE',
        'DEBTCONSOLIDATION', 'HOMEIMPROVEMENT'])
      - Valid
    assumptions:
    - Value should be one of ['EDUCATION', 'MEDICAL', 'PERSONAL', 'VENTURE', 'DEBTCONSOLIDATION',
      'HOMEIMPROVEMENT']
    - Column should be complete without missing values
  loan_percent_income:
    code:
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - Value should be a non-negative fractional number
    - Column should be complete without missing values
  person_age:
    code:
    - - '.hasMin(''person_age'', lambda x: x >= 18)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    - - .isNonNegative('person_age')
      - Valid
    assumptions:
    - Value should be a non-negative integer
    - Person age should be greater than or equal to 18
    - Column should be complete without missing values
  person_emp_length:
    code:
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - Value should be a non-negative fractional number
    - Column should be complete without missing values
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['RENT', 'MORTGAGE', 'OWN', 'OTHER'])
      - Valid
    assumptions:
    - Value should be one of ['RENT', 'MORTGAGE', 'OWN', 'OTHER']
    - Column should be complete without missing values
  person_income:
    code:
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - Value should be a non-negative integer
    - Column should be complete without missing values
