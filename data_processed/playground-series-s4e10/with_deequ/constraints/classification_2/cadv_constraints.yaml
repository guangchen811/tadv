constraints:
  age:
    code:
    - - '.hasMax(''age'', lambda x: x <= 100)'
      - Invalid
    - - '.hasMin(''age'', lambda x: x >= 18)'
      - Invalid
    - - .isNonNegative('age')
      - Invalid
    assumptions:
    - Age should be a non-negative integer.
    - Age should be within a reasonable range for adults (e.g., 18 to 100) to ensure
      data quality.
  credit_hist_length:
    code:
    - - .isNonNegative('credit_hist_length')
      - Invalid
    assumptions:
    - Credit history length should be a non-negative integer.
    - Credit history length should be within a reasonable range, possibly representing
      years.
  default_flag:
    code:
    - - .isContainedIn('default_flag', ['Y', 'N'])
      - Invalid
    assumptions:
    - Default flag should be either 'Y' or 'N'.
  emp_length:
    code:
    - - .isNonNegative('emp_length')
      - Invalid
    assumptions:
    - Employment length should be a non-negative number, potentially representing
      years.
    - Employment length is likely to be an integer or fractional value greater than
      or equal to zero.
  grade:
    code:
    - - .isContainedIn('grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Invalid
    assumptions:
    - 'Loan grade should be one of the predefined categories: ''A'', ''B'', ''C'',
      ''D'', ''E'', ''F'', or ''G''.'
  home_ownership:
    code:
    - - .isContainedIn('home_ownership', ['RENT', 'MORTGAGE', 'OWN', 'OTHER'])
      - Invalid
    assumptions:
    - 'Home ownership should be one of the predefined categories: ''RENT'', ''MORTGAGE'',
      ''OWN'', or ''OTHER''.'
  id:
    code:
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - ID should be a non-negative integer.
    - ID should be unique for each record.
  income:
    code:
    - - '.hasMin(''income'', lambda x: x > 0)'
      - Invalid
    - - .isNonNegative('income')
      - Invalid
    assumptions:
    - Income should be a non-negative integer.
    - Income should be within a reasonable range, possibly greater than zero, as it's
      used in the income_to_loan ratio calculation.
  interest_rate:
    code:
    - - '.hasMax(''interest_rate'', lambda x: x <= 100)'
      - Invalid
    - - .isNonNegative('interest_rate')
      - Invalid
    assumptions:
    - Interest rate should be a non-negative fractional number.
    - Interest rate should be within a reasonable range (e.g., 0% to 100%).
  loan_amount:
    code:
    - - '.hasMin(''loan_amount'', lambda x: x > 0)'
      - Invalid
    - - .isNonNegative('loan_amount')
      - Invalid
    assumptions:
    - Loan amount should be a non-negative integer.
    - Loan amount is used in the income_to_loan ratio calculation, so it should be
      positive.
  loan_income_ratio:
    code:
    - - .isNonNegative('loan_income_ratio')
      - Invalid
    assumptions:
    - Loan income ratio should be a non-negative fractional number.
    - Loan income ratio should be calculated as loan_amount divided by income, which
      implies income should not be zero.
