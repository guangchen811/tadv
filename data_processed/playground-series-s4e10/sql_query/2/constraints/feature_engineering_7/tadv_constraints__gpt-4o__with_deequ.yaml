constraints:
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['N', 'Y'])
      - Valid
    assumptions:
    - The column 'cb_person_default_on_file' should be complete.
    - The column 'cb_person_default_on_file' should contain values from ['N', 'Y'].
  loan_amnt:
    code:
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - The column 'loan_amnt' should be complete.
    - The column 'loan_amnt' should be non-negative.
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - The column 'loan_grade' should be complete.
    - The column 'loan_grade' should contain values from ['A', 'B', 'C', 'D', 'E',
      'F', 'G'].
  loan_int_rate:
    code:
    - - '.hasMax(''loan_int_rate'', lambda x: x >= 20)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - The column 'loan_int_rate' should be complete.
    - The column 'loan_int_rate' should be non-negative.
    - 'The values in ''loan_int_rate'' should be classified into tiers: ''Low Rate''
      for values below 10, ''Medium Rate'' for values between 10 and 20, and ''High
      Rate'' otherwise.'
  loan_intent:
    code:
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'MEDICAL', 'PERSONAL', 'VENTURE',
        'DEBTCONSOLIDATION', 'HOMEIMPROVEMENT'])
      - Valid
    assumptions:
    - The column 'loan_intent' should be complete.
    - The column 'loan_intent' should contain values from ['EDUCATION', 'MEDICAL',
      'PERSONAL', 'VENTURE', 'DEBTCONSOLIDATION', 'HOMEIMPROVEMENT'].
  loan_percent_income:
    code:
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - The column 'loan_percent_income' should be complete.
    - The column 'loan_percent_income' should be non-negative.
  loan_status:
    code:
    - - .isComplete('loan_status')
      - Valid
    - - .isContainedIn('loan_status', ['0', '1'])
      - Valid
    - - .isNonNegative('loan_status')
      - Valid
    assumptions:
    - The column 'loan_status' should be complete.
    - The column 'loan_status' should contain values from ['0', '1'].
    - The column 'loan_status' should be non-negative.
  person_emp_length:
    code:
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - The column 'person_emp_length' should be complete.
    - The column 'person_emp_length' should be non-negative.
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['RENT', 'MORTGAGE', 'OWN', 'OTHER'])
      - Valid
    assumptions:
    - The column 'person_home_ownership' should be complete.
    - The column 'person_home_ownership' should contain values from ['RENT', 'MORTGAGE',
      'OWN', 'OTHER'].
  person_income:
    code:
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - The column 'person_income' should be complete.
    - The column 'person_income' should be non-negative.
