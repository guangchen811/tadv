constraints:
  age:
    code:
    - - '.hasEntropy(''age'', lambda x: x > 0.0)'
      - Invalid
    assumptions:
    - age should have a non-zero variance before modeling
  credit_hist_length:
    code:
    - - '.hasEntropy(''credit_hist_length'', lambda x: x > 0.0)'
      - Invalid
    assumptions:
    - credit_hist_length should have a non-zero variance before modeling
  default_flag:
    code:
    - - .isContainedIn('default_flag', ['Y', 'N'])
      - Invalid
    assumptions:
    - default_flag is expected to be a categorical variable with values 'Y' or 'N'
  emp_length:
    code:
    - - '.hasEntropy(''emp_length'', lambda x: x > 0.0)'
      - Invalid
    assumptions:
    - emp_length should have a non-zero variance before modeling
  grade:
    code:
    - - .hasPattern('grade', 'A|B|C|D|E|F|G')
      - Invalid
    assumptions:
    - grade is expected to be a categorical variable
  home_ownership:
    code:
    - - .hasPattern('home_ownership', 'RENT|OWN|MORTGAGE|OTHER')
      - Invalid
    assumptions:
    - home_ownership is expected to be a categorical variable
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - id must be unique for each row
    - id should be preserved for submission purposes
  income:
    code:
    - - '.hasEntropy(''income'', lambda x: x > 0.0)'
      - Invalid
    - - .isGreaterThan('income', 0.0)
      - Invalid
    assumptions:
    - income should have a non-zero variance before modeling
    - income should not be zero to avoid division errors when calculating income_to_loan
  interest_rate:
    code:
    - - '.hasEntropy(''interest_rate'', lambda x: x > 0.0)'
      - Invalid
    assumptions:
    - interest_rate should have a non-zero variance before modeling
  loan_amount:
    code:
    - - '.hasEntropy(''loan_amount'', lambda x: x > 0.0)'
      - Invalid
    - - .isGreaterThan('loan_amount', 0.0)
      - Invalid
    assumptions:
    - loan_amount should have a non-zero variance before modeling
    - loan_amount should not be zero to avoid division errors when calculating income_to_loan
  loan_income_ratio:
    code:
    - - '.hasEntropy(''loan_income_ratio'', lambda x: x > 0.0)'
      - Invalid
    assumptions:
    - loan_income_ratio should have a non-zero variance before modeling
