constraints:
  cb_person_cred_hist_length:
    code:
    - - '.hasMax(''cb_person_cred_hist_length'', lambda x: x < 100)'
      - Valid
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - NOT NULL
    - IS NON NEGATIVE
    - Should have realistic upper bounds (e.g., < 100 years)
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - NOT NULL
    - IS IN ['Y', 'N']
  loan_amnt:
    code:
    - - '.hasMin(''loan_amnt'', lambda x: x > 0)'
      - Valid
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - NOT NULL
    - IS NON NEGATIVE
    - MIN value should be above zero
    - MAX value should not exceed typical loan limits
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - NOT NULL
    - IS IN ['A', 'B', 'C', 'D', 'E', 'F', 'G']
    - Consider additional reasonable grades if applicable
  loan_int_rate:
    code:
    - - '.hasMax(''loan_int_rate'', lambda x: x <= 100)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - NOT NULL
    - IS NON NEGATIVE
    - Interest rate should be within reasonable bounds (e.g., 0% to 100%)
  loan_percent_income:
    code:
    - - '.hasMax(''loan_percent_income'', lambda x: x <= 1)'
      - Valid
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - NOT NULL
    - IS NON NEGATIVE
    - Should be a fraction (0 to 1) or percentage (0% to 100%)
    - Check for realistic values, considering affordability constraints
  person_age:
    code:
    - - '.hasMax(''person_age'', lambda x: x < 100)'
      - Valid
    - - '.hasMin(''person_age'', lambda x: x >= 18)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    - - .isNonNegative('person_age')
      - Valid
    assumptions:
    - NOT NULL
    - IS NON NEGATIVE
    - MIN value should be reasonable (e.g., 18 for adulthood)
    - Consider age range constraints if applicable (e.g., below 100)
  person_emp_length:
    code:
    - - '.hasMax(''person_emp_length'', lambda x: x < 50)'
      - Invalid
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - NOT NULL
    - IS NON NEGATIVE
    - Emp length should have realistic upper bound (e.g., < 50 years)
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['OWN', 'MORTGAGE', 'RENT', 'OTHER'])
      - Valid
    assumptions:
    - NOT NULL
    - IS IN ['OWN', 'MORTGAGE', 'RENT', 'OTHER']
    - Consider additional reasonable values if applicable
  person_income:
    code:
    - - '.hasMin(''person_income'', lambda x: x > 0)'
      - Valid
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - NOT NULL
    - IS NON NEGATIVE
    - Income values should be positive and realistic
    - MIN value should be above a reasonable poverty threshold
