constraints:
  cb_person_cred_hist_length:
    code:
    - - '.hasMin(''cb_person_cred_hist_length'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - The column is complete, suggesting a NOT NULL constraint.
    - The column should have a minimum value constraint.
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - The column is complete, suggesting a NOT NULL constraint.
    - The column should have unique values, suggesting a UNIQUE constraint.
  loan_amnt:
    code:
    - - '.hasMax(''loan_amnt'', lambda x: x <= 1000000)'
      - Valid
    - - '.hasMin(''loan_amnt'', lambda x: x > 0)'
      - Valid
    - - .isComplete('loan_amnt')
      - Valid
    assumptions:
    - The column is complete, suggesting a NOT NULL constraint.
    - The column should have a minimum value constraint.
    - The column should have a maximum value constraint.
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - 'The column should have values within the set: {A, B, C, D, E, F, G}.'
    - The column is complete, suggesting a NOT NULL constraint.
  loan_int_rate:
    code:
    - - '.hasMax(''loan_int_rate'', lambda x: x <= 100)'
      - Valid
    - - '.hasMin(''loan_int_rate'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    assumptions:
    - The column is complete, suggesting a NOT NULL constraint.
    - The column should have a minimum value constraint.
    - The column should have a maximum value constraint.
  loan_intent:
    code:
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL',
        'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE'])
      - Valid
    assumptions:
    - 'The column should have values within the set: {EDUCATION, HOMEIMPROVEMENT,
      PERSONAL, DEBTCONSOLIDATION, MEDICAL, VENTURE}.'
    - The column is complete, suggesting a NOT NULL constraint.
  loan_percent_income:
    code:
    - - '.hasMax(''loan_percent_income'', lambda x: x <= 100)'
      - Valid
    - - '.hasMin(''loan_percent_income'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('loan_percent_income')
      - Valid
    assumptions:
    - The column is complete, suggesting a NOT NULL constraint.
    - The column should have a minimum value constraint.
    - The column should have a maximum value constraint.
  loan_status:
    code:
    - - .isComplete('loan_status')
      - Valid
    - - .isContainedIn('loan_status', [0, 1])
      - Invalid
    assumptions:
    - 'The column should have values within the set: {0, 1}.'
    - The column is complete, suggesting a NOT NULL constraint.
  person_age:
    code:
    - - '.hasMin(''person_age'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    assumptions:
    - The column is complete, suggesting a NOT NULL constraint.
    - The column should have a minimum value constraint.
  person_emp_length:
    code:
    - - '.hasMax(''person_emp_length'', lambda x: x <= 50)'
      - Invalid
    - - '.hasMin(''person_emp_length'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('person_emp_length')
      - Valid
    assumptions:
    - The column is complete, suggesting a NOT NULL constraint.
    - The column should have a minimum value constraint.
    - The column should have a maximum value constraint.
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['OTHER', 'OWN', 'MORTGAGE', 'RENT'])
      - Valid
    assumptions:
    - 'The column should have values within the set: {OTHER, OWN, MORTGAGE, RENT}
      and potentially other reasonable values.'
    - The column is complete, suggesting a NOT NULL constraint.
