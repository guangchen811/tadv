constraints:
  cb_person_cred_hist_length:
    code:
    - - '.hasMin(''cb_person_cred_hist_length'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - Column should be NOT NULL.
    - Column should have a MIN value of 0.
    - All values should be non-negative.
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - Values should be one of 'Y', 'N'.
    - Column should be NOT NULL.
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - Column should be UNIQUE.
    - Column should be NOT NULL.
  loan_amnt:
    code:
    - - '.hasMin(''loan_amnt'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - Column should be NOT NULL.
    - Column should have a MIN value of 0.
    - All values should be non-negative.
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - Values should be one of 'A', 'B', 'C', 'D', 'E', 'F', 'G'.
    - Column should be NOT NULL.
  loan_int_rate:
    code:
    - - '.hasMin(''loan_int_rate'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - Column should be NOT NULL.
    - Column should have a MIN value of 0.
    - All values should be non-negative.
  loan_intent:
    code:
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL',
        'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE'])
      - Valid
    assumptions:
    - Values should be one of 'EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL', 'DEBTCONSOLIDATION',
      'MEDICAL', 'VENTURE'.
    - Column should be NOT NULL.
  loan_percent_income:
    code:
    - - '.hasMin(''loan_percent_income'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - Column should be NOT NULL.
    - Column should have a MIN value of 0.
    - All values should be non-negative.
  person_age:
    code:
    - - '.hasMin(''person_age'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    - - .isNonNegative('person_age')
      - Valid
    assumptions:
    - Column should be NOT NULL.
    - Column should have a MIN value of 0.
    - All values should be non-negative.
  person_emp_length:
    code:
    - - '.hasMin(''person_emp_length'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - Column should be NOT NULL.
    - Column should have a MIN value of 0.
    - All values should be non-negative.
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['OTHER', 'OWN', 'MORTGAGE', 'RENT'])
      - Valid
    assumptions:
    - Values should be one of 'OTHER', 'OWN', 'MORTGAGE', 'RENT'.
    - Column should be NOT NULL.
  person_income:
    code:
    - - '.hasMin(''person_income'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - Column should be NOT NULL.
    - Column should have a MIN value of 0.
    - All values should be non-negative.
