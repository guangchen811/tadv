constraints:
  cb_person_cred_hist_length:
    code:
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - cb_person_cred_hist_length should be complete with no missing values.
    - cb_person_cred_hist_length should be non-negative.
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - cb_person_default_on_file should be complete with no missing values.
    - cb_person_default_on_file should only have values from ['Y', 'N'].
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - id should be complete with no missing values.
    - id should be unique.
    - id should be non-negative.
  loan_amnt:
    code:
    - - .isComplete('loan_amnt')
      - Valid
    - - .isPositive('loan_amnt')
      - Valid
    assumptions:
    - loan_amnt should be complete with no missing values.
    - loan_amnt should be positive to avoid division by zero when calculating income_to_loan
      ratio.
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - loan_grade should be complete with no missing values.
    - loan_grade should only have values from ['A', 'B', 'C', 'D', 'E', 'F', 'G'].
  loan_int_rate:
    code:
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - loan_int_rate should be complete with no missing values.
    - loan_int_rate should be non-negative.
  loan_percent_income:
    code:
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - loan_percent_income should be complete with no missing values.
    - loan_percent_income should be non-negative.
  loan_status:
    code:
    - - .isComplete('loan_status')
      - Valid
    - - .isContainedIn('loan_status', [0, 1])
      - Invalid
    assumptions:
    - loan_status should be complete with no missing values.
    - loan_status should only have values from [0, 1].
  person_age:
    code:
    - - '.hasMax(''person_age'', lambda x: x <= 100)'
      - Valid
    - - '.hasMin(''person_age'', lambda x: x >= 18)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    assumptions:
    - person_age should be complete with no missing values.
    - person_age should be a positive integer greater than or equal to 18 and less
      than or equal to 100.
  person_emp_length:
    code:
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - person_emp_length should be complete with no missing values.
    - person_emp_length should be non-negative.
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['RENT', 'MORTGAGE', 'OWN', 'OTHER'])
      - Valid
    assumptions:
    - person_home_ownership should be complete with no missing values.
    - person_home_ownership should only have values from ['RENT', 'MORTGAGE', 'OWN',
      'OTHER'].
  person_income:
    code:
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    - - .isPositive('person_income')
      - Valid
    assumptions:
    - person_income should be complete with no missing values.
    - person_income should be non-negative.
    - person_income should be greater than 0 to avoid division by zero when calculating
      income_to_loan ratio.
