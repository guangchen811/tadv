constraints:
  cb_person_cred_hist_length:
    code:
    - - '.hasMax(''cb_person_cred_hist_length'', lambda x: x <= 70)'
      - Valid
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - Credit history length should be non-negative.
    - Credit history length should not exceed a reasonable upper limit (e.g., 70 years).
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - Values should only contain ['Y', 'N'].
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - Values must be unique.
    - Values should not contain nulls.
  loan_amnt:
    code:
    - - '.hasMax(''loan_amnt'', lambda x: x <= 1000000)'
      - Valid
    - - .isComplete('loan_amnt')
      - Valid
    - - .isPositive('loan_amnt')
      - Valid
    assumptions:
    - Loan amount should be positive.
    - Loan amount should not exceed a reasonable upper limit (e.g., not higher than
      1,000,000).
  loan_int_rate:
    code:
    - - '.hasMax(''loan_int_rate'', lambda x: x <= 100)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isPositive('loan_int_rate')
      - Valid
    assumptions:
    - Interest rate should be positive.
    - Interest rate should not exceed 100%.
  loan_intent:
    code:
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL',
        'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE'])
      - Valid
    assumptions:
    - 'Values should only contain the known categories: [''EDUCATION'', ''HOMEIMPROVEMENT'',
      ''PERSONAL'', ''DEBTCONSOLIDATION'', ''MEDICAL'', ''VENTURE''].'
  loan_percent_income:
    code:
    - - '.hasMax(''loan_percent_income'', lambda x: x <= 100)'
      - Valid
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isPositive('loan_percent_income')
      - Invalid
    assumptions:
    - Loan percent income should be positive.
    - Loan percent income should not exceed 100%.
  person_age:
    code:
    - - .isComplete('person_age')
      - Valid
    - - .isGreaterThanOrEqualTo('person_age', '18')
      - Invalid
    - - .isLessThanOrEqualTo('person_age', '100')
      - Invalid
    - - .satisfies('person_age % 1 = 0', 'person_age_is_integer')
      - Valid
    assumptions:
    - Values should be positive integers.
    - Values should be greater than or equal to 18 and less than or equal to 100 (typical
      age range for loan applications).
  person_emp_length:
    code:
    - - '.hasMax(''person_emp_length'', lambda x: x <= 50)'
      - Invalid
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - Values should be non-negative numbers.
    - Employment length should not exceed a reasonable upper limit (e.g., 50 years).
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['OWN', 'MORTGAGE', 'RENT', 'OTHER'])
      - Valid
    assumptions:
    - 'Values should only contain the known categories: [''OWN'', ''MORTGAGE'', ''RENT'',
      ''OTHER''].'
  person_income:
    code:
    - - .isComplete('person_income')
      - Valid
    - - .isPositive('person_income')
      - Valid
    assumptions:
    - Values should be positive numbers.
    - Income should be greater than zero.
