constraints:
  cb_person_cred_hist_length:
    code:
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - cb_person_cred_hist_length should be a non-negative integer
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - 'cb_person_default_on_file should be one of the predefined categories: [''Y'',
      ''N'']'
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - id should be a unique identifier
  loan_amnt:
    code:
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    - - .satisfies('loan_amnt >= 0 WHERE loan_amnt <= 5000 OR loan_amnt > 5000 AND
        loan_amnt <= 15000 OR loan_amnt > 15000 AND loan_amnt <= 30000 OR loan_amnt
        > 30000', 'loan_amnt within defined bins')
      - Invalid
    assumptions:
    - loan_amnt should be a non-negative integer
    - 'loan_amnt should be within the bins defined for categorization: [0, 5000, 15000,
      30000, np.inf]'
  loan_amnt_category:
    code:
    - - .isComplete('loan_amnt_category')
      - Invalid
    - - .isContainedIn('loan_amnt_category', ['Low', 'Medium', 'High', 'Very High'])
      - Invalid
    assumptions:
    - 'loan_amnt_category should be one of the predefined categories: [''Low'', ''Medium'',
      ''High'', ''Very High'']'
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - 'loan_grade should be one of the predefined categories: [''A'', ''B'', ''C'',
      ''D'', ''E'', ''F'', ''G'']'
  loan_int_rate:
    code:
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - loan_int_rate should be a non-negative fractional value
  loan_percent_income:
    code:
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - loan_percent_income should be a non-negative fractional value
  loan_status:
    code:
    - - .isComplete('loan_status')
      - Valid
    - - .isContainedIn('loan_status', [0, 1])
      - Invalid
    assumptions:
    - loan_status should be either 0 or 1, representing binary classification
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['RENT', 'MORTGAGE', 'OWN', 'OTHER'])
      - Valid
    assumptions:
    - 'person_home_ownership should be one of the predefined categories: [''RENT'',
      ''MORTGAGE'', ''OWN'', ''OTHER'']'
