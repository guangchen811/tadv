constraints:
  cb_person_cred_hist_length:
    code:
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - cb_person_cred_hist_length should be greater than or equal to 0
    - cb_person_cred_hist_length should not be NULL
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - cb_person_default_on_file should be either 'Y' or 'N'
    - cb_person_default_on_file should not be NULL
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - id column should be unique
    - id should not be NULL
  loan_amnt:
    code:
    - - .isComplete('loan_amnt')
      - Valid
    - - .isPositive('loan_amnt')
      - Valid
    assumptions:
    - loan_amnt should be greater than 0
    - loan_amnt should not be NULL
  loan_int_rate:
    code:
    - - '.hasMax(''loan_int_rate'', lambda x: x <= 100)'
      - Valid
    - - '.hasMin(''loan_int_rate'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    assumptions:
    - loan_int_rate should be greater than or equal to 0 and less than or equal to
      100
    - loan_int_rate should not be NULL
  loan_intent:
    code:
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL',
        'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE'])
      - Valid
    assumptions:
    - loan_intent should be one of ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL', 'DEBTCONSOLIDATION',
      'MEDICAL', 'VENTURE']
    - loan_intent should not be NULL
  loan_percent_income:
    code:
    - - '.hasMax(''loan_percent_income'', lambda x: x <= 100)'
      - Valid
    - - '.hasMin(''loan_percent_income'', lambda x: x > 0)'
      - Invalid
    - - .isComplete('loan_percent_income')
      - Valid
    assumptions:
    - loan_percent_income should be greater than 0 and realistically should not exceed
      100
    - loan_percent_income should not be NULL
  person_age:
    code:
    - - '.hasMax(''person_age'', lambda x: x <= 100)'
      - Valid
    - - '.hasMin(''person_age'', lambda x: x >= 18)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    assumptions:
    - person_age should be greater than or equal to 18 and less than or equal to 100
    - person_age should not be NULL
  person_emp_length:
    code:
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - person_emp_length should be greater than or equal to 0
    - person_emp_length should not be NULL
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['OWN', 'MORTGAGE', 'RENT', 'OTHER'])
      - Valid
    assumptions:
    - person_home_ownership should be one of ['OWN', 'MORTGAGE', 'RENT', 'OTHER']
    - person_home_ownership should not be NULL
  person_income:
    code:
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - person_income should be greater than or equal to 0
    - person_income should not be NULL
