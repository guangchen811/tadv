constraints:
  cb_person_cred_hist_length:
    code:
    - - '.hasMin(''cb_person_cred_hist_length'', lambda x: x >= 0)'
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - cb_person_cred_hist_length should be a non-negative integer
    - cb_person_cred_hist_length should have a minimum value of 0
  cb_person_default_on_file:
    code:
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - cb_person_default_on_file should have values in ['Y', 'N']
  id:
    code:
    - - .isUnique('id')
      - Valid
    assumptions:
    - id should be unique
  loan_amnt:
    code:
    - - '.hasMin(''loan_amnt'', lambda x: x >= 0)'
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - loan_amnt should be a non-negative integer
    - loan_amnt should have a minimum value of 0
  loan_int_rate:
    code:
    - - '.hasMin(''loan_int_rate'', lambda x: x >= 0)'
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - loan_int_rate should be a non-negative number
    - loan_int_rate should have a minimum value of 0
  loan_intent:
    code:
    - - .isContainedIn('loan_intent', ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL',
        'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE'])
      - Valid
    assumptions:
    - loan_intent should have values in ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL',
      'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE']
  loan_percent_income:
    code:
    - - '.hasMin(''loan_percent_income'', lambda x: x >= 0)'
      - Valid
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - loan_percent_income should be a non-negative number
    - loan_percent_income should have a minimum value of 0
  person_age:
    code:
    - - '.hasMin(''person_age'', lambda x: x >= 0)'
      - Valid
    - - .isNonNegative('person_age')
      - Valid
    assumptions:
    - person_age should be a non-negative integer
    - person_age should have a minimum value of 0
  person_emp_length:
    code:
    - - '.hasMin(''person_emp_length'', lambda x: x >= 0)'
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - person_emp_length should be a non-negative number
    - person_emp_length should have a minimum value of 0
  person_home_ownership:
    code:
    - - .isContainedIn('person_home_ownership', ['OTHER', 'OWN', 'MORTGAGE', 'RENT'])
      - Valid
    assumptions:
    - person_home_ownership should have values in ['OTHER', 'OWN', 'MORTGAGE', 'RENT']
  person_income:
    code:
    - - '.hasMin(''person_income'', lambda x: x >= 0)'
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - person_income should be a non-negative integer
    - person_income should have a minimum value of 0
