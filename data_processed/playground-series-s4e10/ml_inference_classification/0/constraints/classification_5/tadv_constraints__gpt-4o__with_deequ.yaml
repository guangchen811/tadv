constraints:
  cb_person_cred_hist_length:
    code:
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - The 'cb_person_cred_hist_length' column should be complete.
    - The 'cb_person_cred_hist_length' column should be non-negative.
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['N', 'Y'])
      - Valid
    assumptions:
    - The 'cb_person_default_on_file' column should be complete.
    - The 'cb_person_default_on_file' column values should be either 'N' or 'Y'.
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - The 'id' column should be complete.
    - The 'id' column should be unique.
    - The 'id' column should be non-negative.
  loan_amnt:
    code:
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - The 'loan_amnt' column should be complete.
    - The 'loan_amnt' column should be non-negative.
  loan_int_rate:
    code:
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - The 'loan_int_rate' column should be complete.
    - The 'loan_int_rate' column should be non-negative.
  loan_intent:
    code:
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'MEDICAL', 'PERSONAL', 'VENTURE',
        'DEBTCONSOLIDATION', 'HOMEIMPROVEMENT'])
      - Valid
    assumptions:
    - The 'loan_intent' column should be complete.
    - The 'loan_intent' column values should be one of ['EDUCATION', 'MEDICAL', 'PERSONAL',
      'VENTURE', 'DEBTCONSOLIDATION', 'HOMEIMPROVEMENT'].
  loan_percent_income:
    code:
    - - '.hasMax(''loan_percent_income'', lambda x: x <= 1.0)'
      - Valid
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - The 'loan_percent_income' column should be complete.
    - The 'loan_percent_income' column should be non-negative.
    - The 'loan_percent_income' column values should be realistic, possibly not exceeding
      100%.
  person_age:
    code:
    - - '.hasMax(''person_age'', lambda x: x <= 100)'
      - Valid
    - - '.hasMin(''person_age'', lambda x: x >= 18)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    - - .isNonNegative('person_age')
      - Valid
    assumptions:
    - The 'person_age' column should be complete.
    - The 'person_age' column should be non-negative.
    - The 'person_age' column values should be within a reasonable adult age range,
      possibly between 18 and 100.
  person_emp_length:
    code:
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - The 'person_emp_length' column should be complete.
    - The 'person_emp_length' column should be non-negative.
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['RENT', 'MORTGAGE', 'OWN', 'OTHER'])
      - Valid
    assumptions:
    - The 'person_home_ownership' column should be complete.
    - The 'person_home_ownership' column values should be one of ['RENT', 'MORTGAGE',
      'OWN', 'OTHER'].
  person_income:
    code:
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - The 'person_income' column should be complete.
    - The 'person_income' column should be non-negative.
