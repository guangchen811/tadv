constraints:
  cb_person_cred_hist_length:
    code:
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    - - .satisfies('cb_person_cred_hist_length <= (person_age - 18)', 'cred_hist_length_within_age_limit')
      - Invalid
    assumptions:
    - cb_person_cred_hist_length should be complete and non-negative
    - cb_person_cred_hist_length should be less than or equal to person_age minus
      typical credit-starting age (e.g., cb_person_cred_hist_length <= person_age
      - 18)
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - cb_person_default_on_file should be complete and one of ['Y', 'N']
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - id should be complete, unique, and non-negative
  loan_amnt:
    code:
    - - .isComplete('loan_amnt')
      - Valid
    - - .isPositive('loan_amnt')
      - Valid
    - - .satisfies('loan_amnt <= person_income * 10', 'loan_amount_reasonable_compared_to_income')
      - Valid
    assumptions:
    - loan_amnt should be complete and positive
    - loan_amnt should be reasonable compared to person_income (e.g., loan_amnt <=
      person_income * 10)
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - loan_grade should be complete and one of ['A', 'B', 'C', 'D', 'E', 'F', 'G']
  loan_int_rate:
    code:
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isGreaterThanOrEqualTo('loan_int_rate', 0)
      - Invalid
    - - .isLessThanOrEqualTo('loan_int_rate', 50)
      - Invalid
    assumptions:
    - loan_int_rate should be complete, non-negative, and within a realistic range
      (e.g., 0% to 50%)
  loan_intent:
    code:
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'MEDICAL', 'PERSONAL', 'VENTURE',
        'DEBTCONSOLIDATION', 'HOMEIMPROVEMENT'])
      - Valid
    assumptions:
    - loan_intent should be complete and one of ['EDUCATION', 'MEDICAL', 'PERSONAL',
      'VENTURE', 'DEBTCONSOLIDATION', 'HOMEIMPROVEMENT']
  loan_percent_income:
    code:
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isGreaterThanOrEqualTo('loan_percent_income', 0)
      - Invalid
    - - .isLessThanOrEqualTo('loan_percent_income', 100)
      - Invalid
    assumptions:
    - loan_percent_income should be complete, non-negative, and within a realistic
      range (e.g., 0% to 100%)
  person_age:
    code:
    - - .isComplete('person_age')
      - Valid
    - - .isGreaterThanOrEqualTo('person_age', 18)
      - Invalid
    - - .isLessThanOrEqualTo('person_age', 100)
      - Invalid
    assumptions:
    - person_age should be complete and non-negative
    - person_age should be within realistic human age range (e.g., between 18 and
      100)
  person_emp_length:
    code:
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    - - .satisfies('person_emp_length <= (person_age - 18)', 'emp_length_within_age_limit')
      - Invalid
    assumptions:
    - person_emp_length should be complete and non-negative
    - person_emp_length should not exceed person_age minus typical working age (e.g.,
      person_emp_length <= person_age - 18)
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['RENT', 'MORTGAGE', 'OWN', 'OTHER'])
      - Valid
    assumptions:
    - person_home_ownership should be complete and one of ['RENT', 'MORTGAGE', 'OWN',
      'OTHER']
  person_income:
    code:
    - - .isComplete('person_income')
      - Valid
    - - .isPositive('person_income')
      - Valid
    assumptions:
    - person_income should be complete and non-negative
    - person_income should be greater than zero
