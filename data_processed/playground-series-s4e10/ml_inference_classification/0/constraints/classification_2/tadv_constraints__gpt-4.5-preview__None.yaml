constraints:
  cb_person_cred_hist_length:
    code:
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - Values must be non-negative integers.
    - Values should fall within realistic bounds (e.g., credit history length should
      typically not exceed a person's age minus 18).
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - Values must be either 'Y' or 'N'.
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - Values should be unique identifiers with no duplicates.
    - Values must not be missing.
  loan_amnt:
    code:
    - - .isComplete('loan_amnt')
      - Valid
    - - .isPositive('loan_amnt')
      - Valid
    assumptions:
    - Values must be positive and non-zero (since loan amounts are used in division
      for feature generation).
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - Values must be one of ['A', 'B', 'C', 'D', 'E', 'F', 'G'].
  loan_int_rate:
    code:
    - - '.hasMax(''loan_int_rate'', lambda x: x <= 100)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - Values must be non-negative.
    - Interest rates should be within a realistic range (e.g., between 0% and 100%).
  loan_percent_income:
    code:
    - - '.hasMax(''loan_percent_income'', lambda x: x <= 1.0)'
      - Valid
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - Values should be non-negative.
    - Values should be within a realistic range (e.g., typically less than or equal
      to 1.0 or 100%).
  loan_status:
    code:
    - - .isComplete('loan_status')
      - Valid
    - - .isContainedIn('loan_status', [0, 1])
      - Invalid
    assumptions:
    - Values must be either 0 or 1.
    - Values must not have missing values.
  person_age:
    code:
    - - '.hasMax(''person_age'', lambda x: x <= 100)'
      - Valid
    - - '.hasMin(''person_age'', lambda x: x >= 18)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    - - .isNonNegative('person_age')
      - Valid
    assumptions:
    - Values must be non-negative integers.
    - Values should be within a realistic human age range (e.g., between 18 and 100).
  person_emp_length:
    code:
    - - '.hasMax(''person_emp_length'', lambda x: x <= 60)'
      - Valid
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - Values must be non-negative.
    - Realistic upper bound should exist (e.g., employment length should reasonably
      not exceed 60 years).
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['OTHER', 'OWN', 'MORTGAGE', 'RENT'])
      - Valid
    assumptions:
    - Values must be one of ['OTHER', 'OWN', 'MORTGAGE', 'RENT'].
  person_income:
    code:
    - - .isComplete('person_income')
      - Valid
    - - .isPositive('person_income')
      - Valid
    assumptions:
    - Values must be non-negative.
    - Values should not be zero, as income is used in division for feature generation.
