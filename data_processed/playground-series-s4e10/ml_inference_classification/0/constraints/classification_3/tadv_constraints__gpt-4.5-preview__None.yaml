constraints:
  cb_person_cred_hist_length:
    code:
    - - '.hasStandardDeviation(''cb_person_cred_hist_length'', lambda x: x > 0.01)'
      - Valid
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - Value should be non-negative.
    - Variance should be above 1e-4 to avoid dropping.
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - Value should be either 'Y' or 'N'.
  loan_amnt:
    code:
    - - '.hasStandardDeviation(''loan_amnt'', lambda x: x > 0.01)'
      - Valid
    - - .isComplete('loan_amnt')
      - Valid
    - - .isPositive('loan_amnt')
      - Valid
    assumptions:
    - Value should be positive (greater than zero).
    - Variance should be above 1e-4 to avoid dropping.
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - Value should be one of ['A', 'B', 'C', 'D', 'E', 'F', 'G'].
  loan_int_rate:
    code:
    - - '.hasMax(''loan_int_rate'', lambda x: x <= 1)'
      - Invalid
    - - '.hasMin(''loan_int_rate'', lambda x: x >= 0)'
      - Valid
    - - '.hasStandardDeviation(''loan_int_rate'', lambda x: x > 0.01)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    assumptions:
    - Value should be between 0 and 1 (representing 0% to 100%).
    - Variance should be above 1e-4 to avoid dropping.
  loan_percent_income:
    code:
    - - '.hasMax(''loan_percent_income'', lambda x: x <= 1)'
      - Valid
    - - '.hasMin(''loan_percent_income'', lambda x: x > 0)'
      - Invalid
    - - '.hasStandardDeviation(''loan_percent_income'', lambda x: x > 0.01)'
      - Valid
    - - .isComplete('loan_percent_income')
      - Valid
    assumptions:
    - Value should be positive and typically less than or equal to 1 (100%).
    - Variance should be above 1e-4 to avoid dropping.
  person_age:
    code:
    - - '.hasMax(''person_age'', lambda x: x <= 100)'
      - Valid
    - - '.hasMin(''person_age'', lambda x: x >= 18)'
      - Valid
    - - '.hasStandardDeviation(''person_age'', lambda x: x > 0.01)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    - - .isPositive('person_age')
      - Valid
    assumptions:
    - Value should be a positive integer.
    - Value should be within realistic human age range (e.g., between 18 and 100).
    - Variance should be above 1e-4 to avoid dropping.
  person_emp_length:
    code:
    - - '.hasStandardDeviation(''person_emp_length'', lambda x: x > 0.01)'
      - Valid
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - Value should be non-negative.
    - Variance should be above 1e-4 to avoid dropping.
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['OWN', 'RENT', 'MORTGAGE', 'OTHER'])
      - Valid
    assumptions:
    - Value should be one of ['OWN', 'RENT', 'MORTGAGE', 'OTHER'].
  person_income:
    code:
    - - '.hasStandardDeviation(''person_income'', lambda x: x > 0.01)'
      - Valid
    - - .isComplete('person_income')
      - Valid
    - - .isPositive('person_income')
      - Valid
    assumptions:
    - Value should be positive (greater than zero).
    - Variance should be above 1e-4 to avoid dropping.
