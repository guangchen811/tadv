constraints:
  cb_person_cred_hist_length:
    code:
    - - '.hasMinLength(''cb_person_cred_hist_length'', lambda x: x > 0)'
      - Invalid
    - - '.hasStandardDeviation(''cb_person_cred_hist_length'', lambda x: x >= 0.01)'
      - Valid
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - The 'cb_person_cred_hist_length' column should have numeric values since it's
      being used in variance calculations and correlations.
    - The 'cb_person_cred_hist_length' column is expected to have enough variance
      as columns with very low variance might be dropped.
  cb_person_default_on_file:
    code:
    - - '.hasPattern(''cb_person_default_on_file'', ''.*'', lambda x: x == 1.0)'
      - Valid
    - - .isComplete('cb_person_default_on_file')
      - Valid
    assumptions:
    - The 'cb_person_default_on_file' column should be categorical for factorization
      to work correctly.
  loan_amnt:
    code:
    - - '.hasMinLength(''loan_amnt'', lambda x: x > 0)'
      - Invalid
    - - '.hasStandardDeviation(''loan_amnt'', lambda x: x >= 0.01)'
      - Valid
    - - .isComplete('loan_amnt')
      - Valid
    assumptions:
    - The 'loan_amnt' column should have numeric values since it's used in computing
      the income-to-loan ratio.
    - The 'loan_amnt' column is expected to have enough variance as columns with very
      low variance might be dropped.
  loan_grade:
    code:
    - - '.hasPattern(''loan_grade'', ''.*'', lambda x: x == 1.0)'
      - Valid
    - - .isComplete('loan_grade')
      - Valid
    assumptions:
    - The 'loan_grade' column should be categorical for factorization to work correctly.
  loan_int_rate:
    code:
    - - '.hasMinLength(''loan_int_rate'', lambda x: x > 0)'
      - Invalid
    - - '.hasStandardDeviation(''loan_int_rate'', lambda x: x >= 0.01)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    assumptions:
    - The 'loan_int_rate' column should have numeric values since it's being used
      in variance calculations and correlations.
    - The 'loan_int_rate' column is expected to have enough variance as columns with
      very low variance might be dropped.
  loan_percent_income:
    code:
    - - '.hasMinLength(''loan_percent_income'', lambda x: x > 0)'
      - Invalid
    - - '.hasStandardDeviation(''loan_percent_income'', lambda x: x >= 0.01)'
      - Valid
    - - .isComplete('loan_percent_income')
      - Valid
    assumptions:
    - The 'loan_percent_income' column should have numeric values since it's being
      used in variance calculations and correlations.
    - The 'loan_percent_income' column is expected to have enough variance as columns
      with very low variance might be dropped.
  loan_status:
    code:
    - - .isComplete('loan_status')
      - Valid
    - - .isContainedIn('loan_status', [0, 1])
      - Invalid
    assumptions:
    - The 'loan_status' column should have numeric values as it is the target variable.
    - The 'loan_status' column is assumed to be binary with values 0 and 1.
  person_age:
    code:
    - - '.hasMinLength(''person_age'', lambda x: x > 0)'
      - Invalid
    - - '.hasStandardDeviation(''person_age'', lambda x: x >= 0.01)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    assumptions:
    - The 'person_age' column should have numeric values since it's being used in
      variance calculations and correlations.
    - The 'person_age' column is expected to have enough variance as columns with
      very low variance might be dropped.
  person_emp_length:
    code:
    - - '.hasMinLength(''person_emp_length'', lambda x: x > 0)'
      - Invalid
    - - '.hasStandardDeviation(''person_emp_length'', lambda x: x >= 0.01)'
      - Valid
    - - .isComplete('person_emp_length')
      - Valid
    assumptions:
    - The 'person_emp_length' column should have numeric values since it's being used
      in variance calculations and correlations.
    - The 'person_emp_length' column is expected to have enough variance as columns
      with very low variance might be dropped.
  person_home_ownership:
    code:
    - - '.hasPattern(''person_home_ownership'', ''.*'', lambda x: x == 1.0)'
      - Valid
    - - .isComplete('person_home_ownership')
      - Valid
    assumptions:
    - The 'person_home_ownership' column should be categorical for factorization to
      work correctly.
  person_income:
    code:
    - - '.hasMinLength(''person_income'', lambda x: x > 0)'
      - Invalid
    - - '.hasStandardDeviation(''person_income'', lambda x: x >= 0.01)'
      - Valid
    - - .isComplete('person_income')
      - Valid
    assumptions:
    - The 'person_income' column should have numeric values since it's used in computing
      the income-to-loan ratio.
    - The 'person_income' column is expected to have enough variance as columns with
      very low variance might be dropped.
