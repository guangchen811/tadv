constraints:
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['N', 'Y'])
      - Valid
    assumptions:
    - cb_person_default_on_file should be complete.
    - cb_person_default_on_file should be one of ['N', 'Y'].
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - id should be complete.
    - id should be unique.
    - id should be non-negative.
  loan_amnt:
    code:
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - loan_amnt should be complete.
    - loan_amnt should be non-negative.
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - loan_grade should be complete.
    - loan_grade should be one of ['A', 'B', 'C', 'D', 'E', 'F', 'G'].
  loan_int_rate:
    code:
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    assumptions:
    - loan_int_rate should be complete.
    - loan_int_rate should be non-negative.
  loan_intent:
    code:
    - - .isComplete('loan_intent')
      - Valid
    - - .isContainedIn('loan_intent', ['EDUCATION', 'MEDICAL', 'PERSONAL', 'VENTURE',
        'DEBTCONSOLIDATION', 'HOMEIMPROVEMENT'])
      - Valid
    assumptions:
    - loan_intent should be complete.
    - loan_intent should be one of ['EDUCATION', 'MEDICAL', 'PERSONAL', 'VENTURE',
      'DEBTCONSOLIDATION', 'HOMEIMPROVEMENT'].
  loan_percent_income:
    code:
    - - '.hasMax(''loan_percent_income'', lambda x: x <= 100)'
      - Valid
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - loan_percent_income should be complete.
    - loan_percent_income should be non-negative.
    - loan_percent_income should be a realistic percentage (e.g., <= 100).
  person_age:
    code:
    - - '.hasMin(''person_age'', lambda x: x >= 18)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    - - .isNonNegative('person_age')
      - Valid
    assumptions:
    - person_age should be complete.
    - person_age should be non-negative.
    - person_age should contain realistic adult ages (e.g., >= 18).
  person_emp_length:
    code:
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - person_emp_length should be complete.
    - person_emp_length should be non-negative.
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['RENT', 'MORTGAGE', 'OWN', 'OTHER'])
      - Valid
    assumptions:
    - person_home_ownership should be complete.
    - person_home_ownership should be one of ['RENT', 'MORTGAGE', 'OWN', 'OTHER'].
  person_income:
    code:
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - person_income should be complete.
    - person_income should be non-negative.
