constraints:
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['N', 'Y'])
      - Valid
    assumptions:
    - cb_person_default_on_file should be complete with no missing values
    - cb_person_default_on_file should only contain values ['N', 'Y']
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - id should be complete with no missing values
    - id should be unique
    - id should be non-negative
  loan_amnt:
    code:
    - - .isComplete('loan_amnt')
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    - - .satisfies('loan_amnt >= 0', 'loan_amnt_non_negative')
      - Valid
    assumptions:
    - loan_amnt should be complete with no missing values
    - loan_amnt should be non-negative
    - loan_amnt values should be numeric to allow for binning into categorical bins
      [0, 5000, 15000, 30000, inf]
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - loan_grade should be complete with no missing values
    - loan_grade should only contain values from ['A', 'B', 'C', 'D', 'E', 'F', 'G']
  loan_int_rate:
    code:
    - - .isComplete('loan_int_rate')
      - Valid
    - - .isNonNegative('loan_int_rate')
      - Valid
    - - .satisfies('loan_int_rate >= 0', 'loan_int_rate_non_negative')
      - Valid
    assumptions:
    - loan_int_rate should be complete with no missing values
    - loan_int_rate should be non-negative
    - loan_int_rate values should be numeric
