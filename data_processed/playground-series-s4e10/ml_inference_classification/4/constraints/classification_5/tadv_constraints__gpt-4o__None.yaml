constraints:
  cb_person_cred_hist_length:
    code:
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - cb_person_cred_hist_length should be a non-negative integer
  cb_person_default_on_file:
    code:
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - cb_person_default_on_file should be either 'Y' or 'N'
  id:
    code:
    - - .isUnique('id')
      - Valid
    assumptions:
    - id should be unique for each entry
  loan_amnt:
    code:
    - - '.isGreaterThan(''loan_amnt'', ''id'', lambda x: x > 0)'
      - Valid
    - - .isNonNegative('loan_amnt')
      - Valid
    assumptions:
    - loan_amnt should be a non-negative integer
    - loan_amnt should be greater than 0
  loan_int_rate:
    code:
    - - .isNonNegative('loan_int_rate')
      - Valid
    - - .satisfies('loan_int_rate >= 0 AND loan_int_rate <= 1', 'loan_int_rate range
        check')
      - Invalid
    assumptions:
    - loan_int_rate should be a non-negative value
    - loan_int_rate should have values between 0 and 1
  loan_intent:
    code:
    - - .isContainedIn('loan_intent', ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL',
        'DEBTCONSOLIDATION', 'MEDICAL', 'VENTURE'])
      - Valid
    assumptions:
    - loan_intent should be one of ['EDUCATION', 'HOMEIMPROVEMENT', 'PERSONAL', 'DEBTCONSOLIDATION',
      'MEDICAL', 'VENTURE']
  loan_percent_income:
    code:
    - - .isNonNegative('loan_percent_income')
      - Valid
    assumptions:
    - loan_percent_income should be a non-negative value
    - loan_percent_income should be a reasonable fraction of person_income
  person_age:
    code:
    - - '.isGreaterThan(''person_age'', ''id'', lambda x: x > 0)'
      - Valid
    - - .isNonNegative('person_age')
      - Valid
    assumptions:
    - person_age should be a non-negative integer
    - person_age should be greater than 0
  person_emp_length:
    code:
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - person_emp_length should be a non-negative value
  person_home_ownership:
    code:
    - - .isContainedIn('person_home_ownership', ['OWN', 'RENT', 'MORTGAGE', 'OTHER'])
      - Valid
    assumptions:
    - person_home_ownership should be one of ['OWN', 'RENT', 'MORTGAGE', 'OTHER']
  person_income:
    code:
    - - '.isGreaterThan(''person_income'', ''id'', lambda x: x > 0)'
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - person_income should be a non-negative integer
    - person_income should be greater than 0
