constraints:
  cb_person_cred_hist_length:
    code:
    - - .isComplete('cb_person_cred_hist_length')
      - Valid
    - - .isNonNegative('cb_person_cred_hist_length')
      - Valid
    assumptions:
    - Credit history length should be non-negative integer.
    - Column should not contain any missing or null values.
  cb_person_default_on_file:
    code:
    - - .isComplete('cb_person_default_on_file')
      - Valid
    - - .isContainedIn('cb_person_default_on_file', ['Y', 'N'])
      - Valid
    assumptions:
    - Values should be either 'Y' or 'N'.
    - Column should not contain any missing or null values.
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - Values should be unique.
    - Column should not contain any missing or null values.
  loan_amnt:
    code:
    - - .isComplete('loan_amnt')
      - Valid
    - - .isPositive('loan_amnt')
      - Valid
    assumptions:
    - Loan amount should be positive.
    - Column should not contain any missing or null values.
  loan_grade:
    code:
    - - .isComplete('loan_grade')
      - Valid
    - - .isContainedIn('loan_grade', ['A', 'B', 'C', 'D', 'E', 'F', 'G'])
      - Valid
    assumptions:
    - Values should be one of ['A', 'B', 'C', 'D', 'E', 'F', 'G'].
    - Column should not contain any missing or null values.
  loan_int_rate:
    code:
    - - '.hasMax(''loan_int_rate'', lambda x: x <= 100)'
      - Valid
    - - '.hasMin(''loan_int_rate'', lambda x: x >= 0)'
      - Valid
    - - .isComplete('loan_int_rate')
      - Valid
    assumptions:
    - Interest rate should be between 0% and 100%.
    - Column should not contain any missing or null values.
  loan_percent_income:
    code:
    - - '.hasMax(''loan_percent_income'', lambda x: x <= 100)'
      - Valid
    - - .isComplete('loan_percent_income')
      - Valid
    - - .isPositive('loan_percent_income')
      - Invalid
    assumptions:
    - Loan percentage of income should be positive and realistically capped (e.g.,
      not exceeding 100%).
    - Column should not contain any missing or null values.
  loan_status:
    code:
    - - .isComplete('loan_status')
      - Valid
    - - .isContainedIn('loan_status', [0, 1])
      - Invalid
    assumptions:
    - Values should be either 0 or 1.
    - Column should not contain any missing or null values.
  person_age:
    code:
    - - '.hasMax(''person_age'', lambda x: x <= 100)'
      - Valid
    - - '.hasMin(''person_age'', lambda x: x >= 18)'
      - Valid
    - - .isComplete('person_age')
      - Valid
    - - .isPositive('person_age')
      - Valid
    assumptions:
    - Values should be positive integers.
    - Age values should be within a realistic human age range (e.g., between 18 and
      100).
    - Column should not contain any missing or null values.
  person_emp_length:
    code:
    - - .isComplete('person_emp_length')
      - Valid
    - - .isNonNegative('person_emp_length')
      - Valid
    assumptions:
    - Employment length should be non-negative.
    - Column should not contain any missing or null values.
  person_home_ownership:
    code:
    - - .isComplete('person_home_ownership')
      - Valid
    - - .isContainedIn('person_home_ownership', ['OWN', 'RENT', 'MORTGAGE', 'OTHER'])
      - Valid
    assumptions:
    - Values should be one of ['OWN', 'RENT', 'MORTGAGE', 'OTHER'].
    - Column should not contain any missing or null values.
  person_income:
    code:
    - - .isComplete('person_income')
      - Valid
    - - .isNonNegative('person_income')
      - Valid
    assumptions:
    - Income values should be non-negative.
    - Column should not contain any missing or null values.
