constraints:
  Billing Amount:
    code:
    - - '.hasMean(''Billing Amount'', lambda x: x > 0)'
      - Valid
    - - '.hasStandardDeviation(''Billing Amount'', lambda x: x > 0)'
      - Valid
    - - .isComplete('Billing Amount')
      - Valid
    - - .isNonNegative('Billing Amount')
      - Invalid
    assumptions:
    - The column 'Billing Amount' should not contain null values as it is complete
      in the sample.
    - The column 'Billing Amount' should be non-negative as it represents a monetary
      value.
    - The column 'Billing Amount' should have a meaningful mean and standard deviation
      to ensure data consistency.
  Date of Admission:
    code:
    - - .isComplete('Date of Admission')
      - Valid
    - - .satisfies('CAST(Date of Admission AS DATE) IS NOT NULL', 'convertible to
        date')
      - Invalid
    assumptions:
    - The column 'Date of Admission' should not contain null values as it is complete
      in the sample.
    - The column 'Date of Admission' should be convertible to a date format for filtering
      purposes.
  Medical Condition:
    code:
    - - .isComplete('Medical Condition')
      - Valid
    - - .isContainedIn('Medical Condition', ['Hypertension', 'Cancer', 'Obesity',
        'Arthritis', 'Diabetes', 'Asthma'])
      - Valid
    assumptions:
    - The column 'Medical Condition' should not contain null values as it is complete
      in the sample.
    - The column 'Medical Condition' should have values within ['Hypertension', 'Cancer',
      'Obesity', 'Arthritis', 'Diabetes', 'Asthma'] and potentially other reasonable
      medical conditions.
  Name:
    code:
    - - .isComplete('Name')
      - Valid
    assumptions:
    - The column 'Name' should not contain null values as it is complete in the sample.
  Test Results:
    code:
    - - .isComplete('Test Results')
      - Valid
    - - .isContainedIn('Test Results', ['Abnormal', 'Normal', 'Inconclusive'])
      - Valid
    assumptions:
    - The column 'Test Results' should not contain null values as it is complete in
      the sample.
    - The column 'Test Results' should have values within ['Abnormal', 'Normal', 'Inconclusive']
      based on its categorical range.
  id:
    code:
    - - '.hasUniqueValueRatio([''id''], lambda x: x > 0.99)'
      - Valid
    assumptions:
    - The column 'id' should have unique values as the ratio of approximate number
      of distinct values is close to the number of records.
