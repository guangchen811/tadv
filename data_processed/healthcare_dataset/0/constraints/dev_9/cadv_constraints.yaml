constraints:
  Age:
    code:
    - - '.hasMax(''Age'', lambda x: x <= 120)'
      - Valid
    - - .isComplete('Age')
      - Valid
    - - .isNonNegative('Age')
      - Valid
    - - .satisfies('Age % 1 == 0', 'Age should be integral')
      - Valid
    assumptions:
    - The 'Age' column should be complete with no missing values.
    - The 'Age' column should contain only integral values.
    - The 'Age' column should have values greater than or equal to 0.
    - The 'Age' column should have values less than or equal to 120 to ensure realistic
      age values.
  Medical Condition:
    code:
    - - .isComplete('Medical Condition')
      - Valid
    - - .isContainedIn('Medical Condition', ['Hypertension', 'Cancer', 'Obesity',
        'Arthritis', 'Diabetes', 'Asthma'])
      - Valid
    assumptions:
    - The 'Medical Condition' column should be complete with no missing values.
    - 'The ''Medical Condition'' column should only contain the expected values: ''Hypertension'',
      ''Cancer'', ''Obesity'', ''Arthritis'', ''Diabetes'', ''Asthma''.'
  Name:
    code:
    - - .isComplete('Name')
      - Valid
    assumptions:
    - The 'Name' column should be complete with no missing values.
  id:
    code:
    - - .isUnique('id')
      - Valid
    assumptions:
    - The 'id' column should have unique values to ensure each record is distinct.
