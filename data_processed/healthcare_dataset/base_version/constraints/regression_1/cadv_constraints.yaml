constraints:
  Age:
    code:
    - - .isPositive('Age')
      - Valid
    - - .satisfies('Age > 0', 'Age should be greater than 0')
      - Valid
    assumptions:
    - Age should be a positive integer (greater than 0)
    - Age should not contain zeros to avoid NaN generation in cost_age_ratio
  Billing Amount:
    code:
    - - .isNonNegative('Billing Amount')
      - Invalid
    assumptions:
    - Billing Amount should be a non-negative floating-point number
  Hospital:
    code:
    - - .isComplete('Hospital')
      - Valid
    assumptions:
    - Hospital should be a non-empty string indicating a valid hospital name
  Medical Condition:
    code:
    - - .isContainedIn('Medical Condition', ['Hypertension', 'Cancer', 'other_possible_conditions'])
      - Invalid
    assumptions:
    - Medical Condition should be one of the predefined set of conditions (e.g., Hypertension,
      Cancer, etc.)
  Room Number:
    code:
    - - .isComplete('Room Number')
      - Valid
    - - .isNonNegative('Room Number')
      - Invalid
    assumptions:
    - Room Number should be a non-negative integer
    - Room Number should be present in the test dataframe
  id:
    code:
    - - .isUnique('id')
      - Valid
    assumptions:
    - id should be unique for each entry
