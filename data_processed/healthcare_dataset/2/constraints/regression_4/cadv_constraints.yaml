constraints:
  Admission Type:
    code:
    - - .isComplete('Admission Type')
      - Valid
    - - .isContainedIn('Admission Type', ['Emergency', 'Urgent', 'Elective'])
      - Valid
    assumptions:
    - Should be complete (NOT NULL)
    - Should have values within ['Emergency', 'Urgent', 'Elective']
  Age:
    code:
    - - '.hasMean(''Age'', lambda x: x > 0)'
      - Valid
    - - '.hasMin(''Age'', lambda x: x >= 0)'
      - Valid
    - - .hasPattern('Age', '^[0-9]+$')
      - Invalid
    - - '.hasStandardDeviation(''Age'', lambda x: x > 0)'
      - Valid
    - - .isComplete('Age')
      - Valid
    assumptions:
    - Should be complete (NOT NULL)
    - Should be of Integral type
    - Minimum age should be 0
    - Consider mean and standard deviation constraints
  Blood Type:
    code:
    - - .isComplete('Blood Type')
      - Valid
    - - .isContainedIn('Blood Type', ['A+', 'O+', 'B+', 'AB+', 'A-', 'O-', 'B-', 'AB-'])
      - Valid
    assumptions:
    - Should be complete (NOT NULL)
    - Should have values within ['A+', 'O+', 'B+', 'AB+', 'A-', 'O-', 'B-', 'AB-']
  billing_amount:
    code:
    - - '.hasMean(''billing_amount'', lambda x: x > 0)'
      - Invalid
    - - .hasPattern('billing_amount', '^[0-9]*\.?[0-9]+$')
      - Invalid
    - - '.hasStandardDeviation(''billing_amount'', lambda x: x > 0)'
      - Invalid
    - - .isComplete('billing_amount')
      - Invalid
    - - .isNonNegative('billing_amount')
      - Invalid
    assumptions:
    - Should be complete (NOT NULL)
    - Should be of numeric type (Fractional)
    - Values should be non-negative
    - Consider mean and standard deviation constraints
  id:
    code:
    - - .hasPattern('id', '^[0-9]+$')
      - Invalid
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - Should be complete (NOT NULL)
    - Should have unique values
    - Should be of Integral type
