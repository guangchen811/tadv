constraints:
  Age:
    code:
    - - '.hasMean(''Age'', lambda x: x == ''specific_mean_value'')'
      - Invalid
    - - '.hasStandardDeviation(''Age'', lambda x: x == ''specific_std_dev_value'')'
      - Invalid
    - - .isComplete('Age')
      - Valid
    - - .isNonNegative('Age')
      - Valid
    assumptions:
    - Assume 'Age' column is complete and should NOT be NULL as its completeness is
      1.0.
    - Assume 'Age' column values are non-negative, suggesting an IS NON NEGATIVE constraint.
    - Assume 'Age' column values have a specific mean and standard deviation, as it
      is a numeric column.
  Billing Amount:
    code:
    - - '.hasMean(''Billing Amount'', lambda x: x == ''specific_mean_value'')'
      - Invalid
    - - '.hasStandardDeviation(''Billing Amount'', lambda x: x == ''specific_std_dev_value'')'
      - Invalid
    - - .isComplete('Billing Amount')
      - Valid
    - - .isNonNegative('Billing Amount')
      - Invalid
    assumptions:
    - Assume 'Billing Amount' column is complete and should NOT be NULL as its completeness
      is 1.0.
    - Assume 'Billing Amount' column values are non-negative, suggesting an IS NON
      NEGATIVE constraint.
    - Assume 'Billing Amount' column values have a specific mean and standard deviation,
      as it is a numeric column.
  Gender:
    code:
    - - .isComplete('Gender')
      - Valid
    - - .isContainedIn('Gender', ['Male', 'Female'])
      - Valid
    assumptions:
    - Assume 'Gender' column is complete and should NOT be NULL as its completeness
      is 1.0.
    - 'Assume ''Gender'' column values should be within the set: [''Male'', ''Female'']
      based on the categorical values observed.'
  Medical Condition:
    code:
    - - .isComplete('Medical Condition')
      - Valid
    - - .isContainedIn('Medical Condition', ['Hypertension', 'Cancer', 'Obesity',
        'Arthritis', 'Diabetes', 'Asthma'])
      - Valid
    assumptions:
    - Assume 'Medical Condition' column is complete and should NOT be NULL as its
      completeness is 1.0.
    - 'Assume ''Medical Condition'' column values should be within the set: [''Hypertension'',
      ''Cancer'', ''Obesity'', ''Arthritis'', ''Diabetes'', ''Asthma''] based on the
      categorical values observed.'
  id:
    code:
    - - '.hasApproxCountDistinct(''id'', lambda x: x == ''total_number_of_records'')'
      - Invalid
    assumptions:
    - Assume the 'id' column is UNIQUE as its approximate number of distinct values
      is close to the total number of records.
