constraints:
  Admission Type:
    code:
    - - .isComplete('Admission Type')
      - Valid
    - - .isContainedIn('Admission Type', ['Emergency', 'Urgent', 'Elective'])
      - Valid
    assumptions:
    - Admission Type should have values within 'Emergency', 'Urgent', 'Elective'.
    - Admission Type should be complete, i.e., NOT NULL.
  Age:
    code:
    - - .isComplete('Age')
      - Valid
    - - .isNonNegative('Age')
      - Valid
    - - .satisfies('Age == Age.astype(int)', 'Age should be an integer')
      - Invalid
    assumptions:
    - Age should be an integer.
    - Age should be complete, i.e., NOT NULL.
    - Age should be non-negative.
  Billing Amount:
    code:
    - - .isComplete('Billing Amount')
      - Valid
    - - .satisfies('Billing Amount == Billing Amount.astype(float)', 'Billing Amount
        should be a fractional number')
      - Invalid
    assumptions:
    - Billing Amount should be a fractional number.
    - Billing Amount should be complete, i.e., NOT NULL.
  Blood Type:
    code:
    - - .isComplete('Blood Type')
      - Valid
    - - .isContainedIn('Blood Type', ['A+', 'O+', 'B+', 'AB+', 'A-', 'O-', 'B-', 'AB-'])
      - Valid
    assumptions:
    - Blood Type should have values within 'A+', 'O+', 'B+', 'AB+', 'A-', 'O-', 'B-',
      'AB-'.
    - Blood Type should be complete, i.e., NOT NULL.
  Date of Admission:
    code:
    - - .isComplete('Date of Admission')
      - Valid
    - - .satisfies('Date of Admission != ""', 'Date of Admission should be a non-empty
        string')
      - Invalid
    assumptions:
    - Date of Admission should be a non-empty string.
    - Date of Admission should be complete, i.e., NOT NULL.
  Discharge Date:
    code:
    - - .isComplete('Discharge Date')
      - Valid
    - - .satisfies('Discharge Date != ""', 'Discharge Date should be a non-empty string')
      - Invalid
    assumptions:
    - Discharge Date should be a non-empty string.
    - Discharge Date should be complete, i.e., NOT NULL.
  Doctor:
    code:
    - - .isComplete('Doctor')
      - Valid
    - - .satisfies('Doctor != ""', 'Doctor should be a non-empty string')
      - Valid
    assumptions:
    - Doctor should be a non-empty string.
    - Doctor should be complete, i.e., NOT NULL.
  Gender:
    code:
    - - .isComplete('Gender')
      - Valid
    - - .isContainedIn('Gender', ['Male', 'Female'])
      - Valid
    assumptions:
    - Gender should have values within 'Male', 'Female'.
    - Gender should be complete, i.e., NOT NULL.
  Hospital:
    code:
    - - .isComplete('Hospital')
      - Valid
    - - .satisfies('Hospital != ""', 'Hospital should be a non-empty string')
      - Valid
    assumptions:
    - Hospital should be a non-empty string.
    - Hospital should be complete, i.e., NOT NULL.
  Insurance Provider:
    code:
    - - .isComplete('Insurance Provider')
      - Valid
    - - .isContainedIn('Insurance Provider', ['Aetna', 'Blue Cross', 'UnitedHealthcare',
        'Cigna', 'Medicare'])
      - Valid
    assumptions:
    - Insurance Provider should have values within 'Aetna', 'Blue Cross', 'UnitedHealthcare',
      'Cigna', 'Medicare'.
    - Insurance Provider should be complete, i.e., NOT NULL.
  Medical Condition:
    code:
    - - .isComplete('Medical Condition')
      - Valid
    - - .isContainedIn('Medical Condition', ['Hypertension', 'Cancer', 'Obesity',
        'Arthritis', 'Diabetes', 'Asthma'])
      - Valid
    assumptions:
    - Medical Condition should have values within 'Hypertension', 'Cancer', 'Obesity',
      'Arthritis', 'Diabetes', 'Asthma'.
    - Medical Condition should be complete, i.e., NOT NULL.
  Medication:
    code:
    - - .isComplete('Medication')
      - Valid
    - - .isContainedIn('Medication', ['Aspirin', 'Paracetamol', 'Ibuprofen', 'Penicillin',
        'Lipitor'])
      - Valid
    assumptions:
    - Medication should have values within 'Aspirin', 'Paracetamol', 'Ibuprofen',
      'Penicillin', 'Lipitor'.
    - Medication should be complete, i.e., NOT NULL.
  Room Number:
    code:
    - - .isComplete('Room Number')
      - Valid
    - - .satisfies('Room Number == Room Number.astype(int)', 'Room Number should be
        an integer')
      - Invalid
    assumptions:
    - Room Number should be an integer.
    - Room Number should be complete, i.e., NOT NULL.
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isUnique('id')
      - Valid
    - - .satisfies('id == id.astype(int)', 'id should be an integer')
      - Invalid
    assumptions:
    - id should be an integer.
    - id should be complete, i.e., NOT NULL.
    - id should be unique.
