constraints:
  Admission Type:
    code:
    - - .isContainedIn('Admission Type', ['Emergency', 'Urgent', 'Elective'])
      - Valid
    assumptions:
    - 'The ''Admission Type'' column should only contain known categories: Emergency,
      Urgent, Elective.'
  Age:
    code:
    - - .isNonNegative('Age')
      - Valid
    - - .satisfies('Age == int(Age)', 'Age should be integer')
      - Valid
    assumptions:
    - The 'Age' column should contain only integer values.
    - The 'Age' column values should be non-negative.
  Billing Amount:
    code:
    - - .satisfies('Billing Amount == float(Billing Amount)', 'Billing Amount should
        be numeric')
      - Invalid
    assumptions:
    - The 'Billing Amount' column should contain only numeric values.
  Blood Type:
    code:
    - - .isContainedIn('Blood Type', ['A+', 'O+', 'B+', 'AB+', 'A-', 'O-', 'B-', 'AB-'])
      - Valid
    assumptions:
    - 'The ''Blood Type'' column should only contain known categories: A+, O+, B+,
      AB+, A-, O-, B-, AB-.'
  Date of Admission:
    code:
    - - .satisfies('to_date(Date of Admission, 'yyyy-MM-dd') IS NOT NULL', 'Date of
        Admission should be a valid date format')
      - Invalid
    assumptions:
    - The 'Date of Admission' column should be in a valid date format.
  Discharge Date:
    code:
    - - .satisfies('to_date(Discharge Date, 'yyyy-MM-dd') IS NOT NULL', 'Discharge
        Date should be a valid date format')
      - Invalid
    assumptions:
    - The 'Discharge Date' column should be in a valid date format.
  Doctor:
    code:
    - - .isComplete('Doctor')
      - Valid
    assumptions:
    - The 'Doctor' column should not contain null values.
  Gender:
    code:
    - - .isContainedIn('Gender', ['Male', 'Female'])
      - Valid
    assumptions:
    - 'The ''Gender'' column should only contain known categories: Male, Female.'
  Hospital:
    code:
    - - .isComplete('Hospital')
      - Valid
    assumptions:
    - The 'Hospital' column should not contain null values.
  Insurance Provider:
    code:
    - - .isContainedIn('Insurance Provider', ['Aetna', 'Blue Cross', 'UnitedHealthcare',
        'Cigna', 'Medicare'])
      - Valid
    assumptions:
    - 'The ''Insurance Provider'' column should only contain known categories: Aetna,
      Blue Cross, UnitedHealthcare, Cigna, Medicare.'
  Medical Condition:
    code:
    - - .isContainedIn('Medical Condition', ['Hypertension', 'Cancer', 'Obesity',
        'Arthritis', 'Diabetes', 'Asthma'])
      - Valid
    assumptions:
    - 'The ''Medical Condition'' column should only contain known categories: Hypertension,
      Cancer, Obesity, Arthritis, Diabetes, Asthma.'
  Medication:
    code:
    - - .isContainedIn('Medication', ['Aspirin', 'Paracetamol', 'Ibuprofen', 'Penicillin',
        'Lipitor'])
      - Valid
    assumptions:
    - 'The ''Medication'' column should only contain known categories: Aspirin, Paracetamol,
      Ibuprofen, Penicillin, Lipitor.'
  Room Number:
    code:
    - - .satisfies('Room Number == int(Room Number)', 'Room Number should be integer')
      - Invalid
    assumptions:
    - The 'Room Number' column should contain only integer values.
  id:
    code:
    - - .isUnique('id')
      - Valid
    assumptions:
    - The 'id' column should be unique for each row in both the training and test
      datasets.
