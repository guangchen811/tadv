constraints:
  Admission Type:
    code:
    - - .isContainedIn('Admission Type', ['Urgent', 'Elective', 'Emergency'])
      - Valid
    assumptions:
    - Values should be one of 'Urgent', 'Elective', or 'Emergency'.
  Age:
    code:
    - - '.isLessThanOrEqualTo(''Age'', lambda x: x <= 100)'
      - Invalid
    - - .isPositive('Age')
      - Valid
    assumptions:
    - All values should be greater than 0 and less than or equal to 100.
  Billing Amount:
    code:
    - - '.hasQuantile(''Billing Amount'', 0.95, lambda x: x < 50000)'
      - Invalid
    assumptions:
    - At least 95% of the values should be less than 50000.
  Blood Type:
    code:
    - - .isContainedIn('Blood Type', ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+',
        'O-', 'Rh-null', 'Rare'])
      - Valid
    assumptions:
    - Values should be one of 'A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-', 'Rh-null',
      or 'Rare'.
  Gender:
    code:
    - - .isContainedIn('Gender', ['Male', 'Female'])
      - Valid
    assumptions:
    - Values should be either 'Male' or 'Female'.
  Medication:
    code:
    - - .isContainedIn('Medication', ['Aspirin', 'Paracetamol', 'Ibuprofen', 'Penicillin',
        'Lipitor'])
      - Valid
    assumptions:
    - Values should be one of 'Aspirin', 'Paracetamol', 'Ibuprofen', 'Penicillin',
      or 'Lipitor'.
  Test Results:
    code:
    - - .isContainedIn('Test Results', ['Abnormal', 'Normal', 'Inconclusive'])
      - Valid
    assumptions:
    - Values should be one of 'Abnormal', 'Normal', or 'Inconclusive'.
  id:
    code:
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - Values should be unique.
    - Values should be non-negative.
