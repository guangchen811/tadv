constraints:
  Age:
    code:
    - - .isComplete('age')
      - Valid
    - - .isNonNegative('age')
      - Valid
    - - .satisfies('age > 0', 'Age should be greater than 0 where calculating cost_per_year_of_age')
      - Valid
    assumptions:
    - The Age column should be non-negative.
    - The Age column should not be zero when calculating cost_per_year_of_age.
    - The Age column should be complete (no missing values).
  Billing Amount:
    code:
    - - .isComplete('billing_amount')
      - Invalid
    - - .isNonNegative('billing_amount')
      - Invalid
    assumptions:
    - The Billing Amount column should be non-negative.
    - The Billing Amount column should be complete (no missing values).
  Gender:
    code:
    - - .isComplete('gender')
      - Valid
    - - .isContainedIn('gender', ['Male', 'Female'])
      - Valid
    assumptions:
    - The Gender column should only contain values ['Male', 'Female'].
    - The Gender column should be complete (no missing values).
  Test Results:
    code:
    - - .isComplete('test_results')
      - Invalid
    - - .isContainedIn('test_results', ['Abnormal', 'Normal', 'Inconclusive'])
      - Invalid
    assumptions:
    - The Test Results column should only contain values ['Abnormal', 'Normal', 'Inconclusive'].
    - The Test Results column should be complete (no missing values).
  id:
    code:
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - The id column should be non-negative.
    - The id column should be unique.
