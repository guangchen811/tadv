constraints:
  Age:
    code:
    - - '.hasMax(''Age'', lambda x: x <= 120)'
      - Valid
    - - .isComplete('Age')
      - Valid
    - - .isNonNegative('Age')
      - Valid
    assumptions:
    - The 'Age' column must be complete, meaning no missing values.
    - The 'Age' column must contain only non-negative values.
    - The ages should be within a realistic human age range, e.g., between 0 and 120.
  Billing Amount:
    code:
    - - .isComplete('Billing Amount')
      - Valid
    - - .isNonNegative('Billing Amount')
      - Invalid
    assumptions:
    - The 'Billing Amount' column must be complete, meaning no missing values.
    - The 'Billing Amount' must be non-negative, as billing amounts cannot be negative.
  Gender:
    code:
    - - .isComplete('Gender')
      - Valid
    - - .isContainedIn('Gender', ['Male', 'Female'])
      - Valid
    assumptions:
    - The 'Gender' column must be complete, meaning no missing values.
    - The 'Gender' column should only contain the values 'Male' or 'Female'.
  Medical Condition:
    code:
    - - .isComplete('Medical Condition')
      - Valid
    - - .isContainedIn('Medical Condition', ['Diabetes', 'Asthma', 'Obesity', 'Hypertension',
        'Arthritis', 'Cancer'])
      - Valid
    assumptions:
    - The 'Medical Condition' column must be complete, meaning no missing values.
    - The 'Medical Condition' column should only contain known medical conditions
      like 'Diabetes', 'Asthma', 'Obesity', 'Hypertension', 'Arthritis', 'Cancer'.
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - The 'id' column must be complete, meaning no missing values.
    - The 'id' column must contain only non-negative values.
    - Each value in the 'id' column must be unique.
