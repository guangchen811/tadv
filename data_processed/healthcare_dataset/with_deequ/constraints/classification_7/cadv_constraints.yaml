constraints:
  age:
    code:
    - - '.hasMin(''age'', lambda x: x > 0)'
      - Valid
    - - .isComplete('age')
      - Valid
    - - .isNonNegative('age')
      - Valid
    assumptions:
    - The 'age' column should be complete, meaning no missing values.
    - The 'age' column should be non-negative.
    - The 'age' column should be greater than 0 for the calculation of 'cost_per_year_of_age'.
  billing_amount:
    code:
    - - .isComplete('billing_amount')
      - Invalid
    - - .isNonNegative('billing_amount')
      - Invalid
    assumptions:
    - The 'billing_amount' column should be complete, meaning no missing values.
    - The 'billing_amount' should be non-negative, as it represents a monetary value.
  gender:
    code:
    - - .isComplete('gender')
      - Valid
    - - .isContainedIn('gender', ['Male', 'Female'])
      - Valid
    assumptions:
    - The 'gender' column should be complete, meaning no missing values.
    - The 'gender' column should contain only 'Male' or 'Female'.
  id:
    code:
    - - .isComplete('id')
      - Valid
    - - .isNonNegative('id')
      - Valid
    - - .isUnique('id')
      - Valid
    assumptions:
    - The 'id' column should be complete, meaning no missing values.
    - The 'id' column should be non-negative.
    - The 'id' column should be unique, as it serves as an identifier.
